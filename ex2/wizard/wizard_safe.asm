
_RTL_CRITICAL_SECTION struc ; (sizeof=0x18, align=0x4, copyof_1)
                        ; XREF: .bss:CriticalSection/r
DebugInfo dd ?          ; offset
LockCount dd ?
RecursionCount dd ?
OwningThread dd ?       ; offset
LockSemaphore dd ?      ; offset
SpinCount dd ?
_RTL_CRITICAL_SECTION ends


_MEMORY_BASIC_INFORMATION struc ; (sizeof=0x1C, align=0x4, copyof_11)
                        ; XREF: sub_402E20/r
BaseAddress dd ?        ; XREF: sub_402E20+78/r
                        ; sub_402E20+BD/r ; offset
AllocationBase dd ?     ; offset
AllocationProtect dd ?
RegionSize dd ?         ; XREF: sub_402E20:loc_402E80/r
                        ; sub_402E20+B5/r
State dd ?
Protect dd ?            ; XREF: sub_402E20+30/r
                        ; sub_402E20+87/r
Type dd ?
_MEMORY_BASIC_INFORMATION ends


_WIN32_FIND_DATAA struc ; (sizeof=0x140, align=0x4, copyof_14)
                        ; XREF: sub_404620/r sub_404700/r
dwFileAttributes dd ?   ; XREF: sub_404620+51/r
                        ; sub_404700+50/r
ftCreationTime FILETIME ?
ftLastAccessTime FILETIME ?
ftLastWriteTime FILETIME ?
nFileSizeHigh dd ?
nFileSizeLow dd ?
dwReserved0 dd ?
dwReserved1 dd ?
cFileName db 260 dup(?) ; XREF: sub_404620+46/r
                        ; sub_404700+45/r
cAlternateFileName db 14 dup(?)
db ? ; undefined
db ? ; undefined
_WIN32_FIND_DATAA ends


FILETIME struc ; (sizeof=0x8, align=0x4, copyof_15)
                        ; XREF: _WIN32_FIND_DATAA/r
                        ; _WIN32_FIND_DATAA/r ...
dwLowDateTime dd ?
dwHighDateTime dd ?
FILETIME ends


;
; +-------------------------------------------------------------------------+
; |   This file has been generated by The Interactive Disassembler (IDA)    |
; |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 76CD009C41BDDD5C06CD2CE9EEAEA4BF380C0664B436C0D5DE287F88DF0F8291
; Input MD5    : EAA566FAC9D58D9E30197D0C726B37EA
; Input CRC32  : 72FA8108

; File Name   : C:\Users\Shahak\Desktop\Technion\Semester 7\Reverse Engineering\HW2\wizard\wizard_safe.exe
; Format      : Portable executable for 80386 (PE)
; Imagebase   : 400000
; Timestamp   : 5DD58593 (Wed Nov 20 18:27:31 2019)
; Section 1. (virtual address 00001000)
; Virtual size                  : 00003D34 (  15668.)
; Section size in file          : 00003E00 (  15872.)
; Offset to raw data for section: 00000400
; Flags 60500060: Text Data Executable Readable
; Alignment     : 16 bytes

.686p
.mmx
.model flat


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment para public 'CODE' use32
assume cs:_text
;org 401000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing



; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter proc near

var_1C= dword ptr -1Ch
var_18= dword ptr -18h
ExceptionInfo= dword ptr  4

sub     esp, 1Ch
mov     eax, [esp+1Ch+ExceptionInfo]
mov     eax, [eax]
mov     eax, [eax]
cmp     eax, 0C0000091h
jbe     short loc_401040
cmp     eax, 0C0000094h
jz      loc_4010F4
cmp     eax, 0C0000096h
jz      short loc_401087
cmp     eax, 0C0000093h
jz      loc_4010C0

loc_40102F:
xor     eax, eax

loc_401031:
add     esp, 1Ch
retn    4
align 10h

loc_401040:
cmp     eax, 0C000008Dh
jnb     short loc_4010C0
cmp     eax, 0C0000005h
jnz     short loc_401080
mov     [esp+1Ch+var_18], 0
mov     [esp+1Ch+var_1C], 0Bh
call    signal
cmp     eax, 1
jz      loc_40115A
test    eax, eax
jz      short loc_40102F
mov     [esp+1Ch+var_1C], 0Bh
call    eax
mov     eax, 0FFFFFFFFh
jmp     short loc_401031
align 10h

loc_401080:
cmp     eax, 0C000001Dh
jnz     short loc_40102F

loc_401087:
mov     [esp+1Ch+var_18], 0
mov     [esp+1Ch+var_1C], 4
call    signal
cmp     eax, 1
jz      loc_401176
test    eax, eax
jz      short loc_40102F
mov     [esp+1Ch+var_1C], 4
call    eax
mov     eax, 0FFFFFFFFh
jmp     loc_401031
align 10h

loc_4010C0:
mov     [esp+1Ch+var_18], 0
mov     [esp+1Ch+var_1C], 8
call    signal
cmp     eax, 1
jz      short loc_401130

loc_4010D9:
test    eax, eax
jz      loc_40102F
mov     [esp+1Ch+var_1C], 8
call    eax
mov     eax, 0FFFFFFFFh
jmp     loc_401031

loc_4010F4:
mov     [esp+1Ch+var_18], 0
mov     [esp+1Ch+var_1C], 8
call    signal
cmp     eax, 1
jnz     short loc_4010D9
mov     [esp+1Ch+var_18], 1
mov     [esp+1Ch+var_1C], 8
call    signal
mov     eax, 0FFFFFFFFh
jmp     loc_401031
align 10h

loc_401130:
mov     [esp+1Ch+var_18], 1
mov     [esp+1Ch+var_1C], 8
call    signal
mov     [esp+1Ch+var_1C], 0
call    sub_403120
mov     eax, 0FFFFFFFFh
jmp     loc_401031

loc_40115A:
mov     [esp+1Ch+var_18], 1
mov     [esp+1Ch+var_1C], 0Bh
call    signal
or      eax, 0FFFFFFFFh
jmp     loc_401031

loc_401176:
mov     [esp+1Ch+var_18], 1
mov     [esp+1Ch+var_1C], 4
call    signal
or      eax, 0FFFFFFFFh
jmp     loc_401031
TopLevelExceptionFilter endp

align 10h


; Attributes: noreturn bp-based frame fuzzy-sp

sub_4011A0 proc near

lpTopLevelExceptionFilter= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h

push    ebp
mov     ebp, esp
push    ebx
sub     esp, 14h
mov     eax, ds:off_406208
test    eax, eax
jz      short loc_4011CC
mov     [esp+18h+var_10], 0
mov     [esp+18h+var_14], 2
mov     [esp+18h+lpTopLevelExceptionFilter], 0
call    eax ; TlsCallback_0
sub     esp, 0Ch

loc_4011CC:             ; lpTopLevelExceptionFilter
mov     [esp+18h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter
call    SetUnhandledExceptionFilter
sub     esp, 4
call    sub_4028C0
mov     eax, dword_405064
mov     [esp+18h+lpTopLevelExceptionFilter], eax
call    sub_403120
call    sub_402550
mov     eax, ds:dword_408024
test    eax, eax
jnz     short loc_401245

loc_4011FB:
call    __p__fmode
mov     edx, dword_405068
mov     [eax], edx
call    sub_402F10
and     esp, 0FFFFFFF0h
call    sub_402A60
call    __p__environ
mov     eax, [eax]
mov     [esp+18h+var_10], eax
mov     eax, ds:dword_408000
mov     [esp+18h+var_14], eax
mov     eax, ds:dword_408004
mov     [esp+18h+lpTopLevelExceptionFilter], eax
call    sub_401473
mov     ebx, eax
call    _cexit
mov     [esp+18h+lpTopLevelExceptionFilter], ebx ; uExitCode
call    ExitProcess

loc_401245:
mov     ebx, ds:_iob
mov     dword_405068, eax
mov     [esp+18h+var_14], eax
mov     eax, [ebx+10h]
mov     [esp+18h+lpTopLevelExceptionFilter], eax
call    _setmode
mov     eax, ds:dword_408024
mov     [esp+18h+var_14], eax
mov     eax, [ebx+30h]
mov     [esp+18h+lpTopLevelExceptionFilter], eax
call    _setmode
mov     eax, ds:dword_408024
mov     [esp+18h+var_14], eax
mov     eax, [ebx+50h]
mov     [esp+18h+lpTopLevelExceptionFilter], eax
call    _setmode
jmp     loc_4011FB
sub_4011A0 endp

align 10h



sub_401290 proc near

var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_14= byte ptr -14h
var_10= dword ptr -10h

sub     esp, 3Ch
lea     eax, [esp+3Ch+var_10]
mov     [esp+3Ch+var_38], offset dword_408000
mov     [esp+3Ch+var_2C], eax
mov     eax, dword_405060
mov     [esp+3Ch+var_3C], offset dword_408004
and     eax, 1
mov     [esp+3Ch+var_10], 0
mov     [esp+3Ch+var_30], eax
lea     eax, [esp+3Ch+var_14]
mov     [esp+3Ch+var_34], eax
call    __getmainargs
add     esp, 3Ch
retn
sub_401290 endp

align 10h


; Attributes: noreturn

public start
start proc near

var_1C= dword ptr -1Ch

sub     esp, 1Ch
mov     [esp+1Ch+var_1C], 1
call    ds:__set_app_type
call    sub_4011A0
start endp

align 10h
sub     esp, 1Ch
mov     dword ptr [esp], 2
call    ds:__set_app_type
call    sub_4011A0
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
jmp     ds:_onexit
align 10h


; Attributes: bp-based frame

sub_401330 proc near

lpModuleName= dword ptr -18h
lpProcName= dword ptr -14h

push    ebp
mov     ebp, esp
push    esi
push    ebx
sub     esp, 10h
mov     [esp+18h+lpModuleName], offset LibFileName ; "libgcc_s_dw2-1.dll"
call    GetModuleHandleA
sub     esp, 4
test    eax, eax
jz      short loc_4013C0
mov     [esp+18h+lpModuleName], offset LibFileName ; "libgcc_s_dw2-1.dll"
mov     ebx, eax
call    LoadLibraryA
sub     esp, 4
mov     ds:hLibModule, eax
mov     [esp+18h+lpProcName], offset ProcName ; "__register_frame_info"
mov     [esp+18h+lpModuleName], ebx ; hModule
call    GetProcAddress
sub     esp, 8
mov     esi, eax
mov     [esp+18h+lpProcName], offset aDeregisterFram ; "__deregister_frame_info"
mov     [esp+18h+lpModuleName], ebx ; hModule
call    GetProcAddress
mov     dword_405000, eax
sub     esp, 8

loc_40138E:
test    esi, esi
jz      short loc_4013A3
mov     [esp+18h+lpProcName], offset unk_408008
mov     [esp+18h+lpModuleName], offset unk_4070B8
call    esi

loc_4013A3:             ; void (__cdecl *)()
mov     [esp+18h+lpModuleName], offset sub_4013E0
call    atexit
lea     esp, [ebp-8]
pop     ebx
pop     esi
pop     ebp
retn
align 10h

loc_4013C0:
mov     dword_405000, 0
mov     esi, 0
jmp     short loc_40138E
sub_401330 endp

align 10h


; Attributes: bp-based frame

; void __cdecl sub_4013E0()
sub_4013E0 proc near

hLibModule= dword ptr -18h

push    ebp
mov     ebp, esp
sub     esp, 18h
mov     eax, dword_405000
test    eax, eax
jz      short loc_4013F8
mov     [esp+18h+hLibModule], offset unk_4070B8
call    eax ; dword_405000

loc_4013F8:
mov     eax, ds:hLibModule
test    eax, eax
jz      short locret_40140C
mov     [esp+18h+hLibModule], eax ; hLibModule
call    FreeLibrary
sub     esp, 4

locret_40140C:
leave
retn
sub_4013E0 endp

align 10h


; Attributes: bp-based frame

sub_401410 proc near

var_10= dword ptr -10h
File= dword ptr -0Ch
var_8= byte ptr -8
var_4= dword ptr -4
arg_0= dword ptr  8
arg_4= dword ptr  0Ch

push    ebp
mov     ebp, esp
sub     esp, 10h
mov     eax, [ebp+arg_0]
mov     [ebp+var_8], al
mov     [ebp+var_4], 0
jmp     short loc_401459

loc_401425:
mov     eax, ds:dword_408020
lea     edx, [eax+1]
mov     ds:dword_408020, edx
movzx   eax, byte_405020[eax]
xor     al, [ebp+var_8]
movsx   eax, al
mov     edx, ds:_iob
add     edx, 40h
mov     [esp+10h+File], edx ; File
mov     [esp+10h+var_10], eax ; Ch
call    fputc
add     [ebp+var_4], 1

loc_401459:
mov     eax, [ebp+var_4]
cmp     eax, [ebp+arg_4]
jge     short loc_401470
mov     edx, ds:dword_408020
mov     eax, dword_40505C
cmp     edx, eax
jl      short loc_401425

loc_401470:
nop
leave
retn
sub_401410 endp



; Attributes: bp-based frame

sub_401473 proc near
push    ebp
mov     ebp, esp
call    sub_402A60
call    sub_401491
call    sub_401583
call    sub_402378
mov     eax, 0
pop     ebp
retn
sub_401473 endp



; Attributes: bp-based frame

sub_401491 proc near

Format= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_5= byte ptr -5
var_4= dword ptr -4

push    ebp
mov     ebp, esp
sub     esp, 28h
mov     [ebp+var_C], 0DEADBEEFh
mov     [ebp+var_10], 0
lea     eax, [ebp+var_C]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset Format ; " %x"
call    scanf
mov     eax, [ebp+var_C]
test    eax, eax
jns     short loc_4014C7
mov     eax, [ebp+var_C]
neg     eax
mov     [ebp+var_C], eax

loc_4014C7:
lea     eax, [ebp+var_14]
mov     [esp+28h+var_1C], eax
lea     eax, [ebp+var_10]
mov     [esp+28h+var_20], eax
lea     eax, [ebp+var_18]
mov     [esp+28h+var_24], eax
mov     [esp+28h+Format], offset aDDD ; " %d %d %d"
call    scanf
mov     edx, [ebp+var_14]
mov     eax, [ebp+var_14]
imul    edx, eax
mov     eax, edx
shl     edx, 3
sub     eax, edx
add     eax, eax
mov     edx, eax
mov     eax, [ebp+var_14]
imul    eax, 0FFFFF724h
add     eax, edx
add     eax, 1672Dh
mov     [ebp+var_4], eax
mov     eax, [ebp+var_18]
mov     [ebp+var_5], al
mov     eax, [ebp+var_18]
test    eax, eax
js      short loc_401522
cmp     [ebp+var_5], 0C4h
jz      short loc_40152E

loc_401522:             ; Code
mov     [esp+28h+Format], 1
call    exit

loc_40152E:
mov     eax, [ebp+var_10]
test    eax, eax
jns     short loc_401574
mov     eax, [ebp+var_10]
sub     eax, [ebp+var_4]
test    eax, eax
jle     short loc_401574
mov     eax, [ebp+var_C]
test    eax, eax
jns     short loc_401580
mov     eax, [ebp+var_18]
movsx   eax, al
mov     [esp+28h+var_24], 2
mov     [esp+28h+Format], eax
call    sub_401410
mov     eax, [ebp+var_14]
movsx   eax, al
mov     [esp+28h+var_24], 2
mov     [esp+28h+Format], eax
call    sub_401410
jmp     short loc_401580

loc_401574:             ; Code
mov     [esp+28h+Format], 1
call    exit

loc_401580:
nop
leave
retn
sub_401491 endp



; Attributes: bp-based frame

sub_401583 proc near

nStdHandle= dword ptr -0F4h
wAttributes= word ptr -0F0h
var_EC= dword ptr -0ECh
var_E8= dword ptr -0E8h
var_E4= dword ptr -0E4h
var_E0= dword ptr -0E0h
var_DC= dword ptr -0DCh
var_D8= dword ptr -0D8h
var_D4= dword ptr -0D4h
var_D0= dword ptr -0D0h
var_CC= dword ptr -0CCh
var_C8= dword ptr -0C8h
var_C4= dword ptr -0C4h
var_C0= dword ptr -0C0h
var_BC= dword ptr -0BCh
var_B8= dword ptr -0B8h
var_B4= dword ptr -0B4h
var_B0= dword ptr -0B0h
var_AC= dword ptr -0ACh
var_A8= dword ptr -0A8h
var_A4= dword ptr -0A4h
var_A0= dword ptr -0A0h
var_9C= dword ptr -9Ch
var_98= dword ptr -98h
var_94= dword ptr -94h
var_90= dword ptr -90h
var_8C= dword ptr -8Ch
hConsoleOutput= dword ptr -88h
var_84= dword ptr -84h
var_80= dword ptr -80h
var_7C= dword ptr -7Ch
var_78= dword ptr -78h
var_74= dword ptr -74h
var_70= dword ptr -70h
var_6C= dword ptr -6Ch
var_68= dword ptr -68h
var_64= dword ptr -64h
var_60= dword ptr -60h
var_5C= dword ptr -5Ch
var_58= dword ptr -58h
var_54= dword ptr -54h
var_50= dword ptr -50h
var_4C= dword ptr -4Ch
var_48= dword ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
var_10= dword ptr -10h
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4

push    ebp
mov     ebp, esp
push    edi
sub     esp, 0F0h
mov     [esp+0F4h+nStdHandle], 0FFFFFFF5h ; nStdHandle
call    GetStdHandle
sub     esp, 4
mov     [ebp+hConsoleOutput], eax
mov     [ebp+var_BC], 8
mov     [ebp+var_B8], 5
mov     [ebp+var_B4], 6
mov     [ebp+var_B0], 4
mov     [ebp+var_AC], 0Ah
mov     [ebp+var_A8], 0Bh
mov     [ebp+var_A4], 0Ch
mov     [ebp+var_A0], 1
mov     [ebp+var_9C], 9
mov     [ebp+var_98], 7
mov     [ebp+var_94], 2
mov     [ebp+var_90], 3
lea     edx, [ebp+var_EC]
mov     eax, 0
mov     ecx, 0Ch
mov     edi, edx
rep stosd
mov     [ebp+var_8], 0
jmp     loc_4016D9

loc_40163A:
mov     [ebp+var_C], 0
jmp     short loc_4016BF

loc_401643:
mov     eax, 0Bh
sub     eax, [ebp+var_8]
cmp     [ebp+var_C], eax
jz      short loc_40165B
mov     eax, [ebp+var_8]
add     eax, 0Bh
cmp     [ebp+var_C], eax
jnz     short loc_4016AF

loc_40165B:
cmp     [ebp+var_8], 0
jnz     short loc_4016A1
mov     dword ptr [esp+0F4h+wAttributes], 4 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_406052 ; " ?"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_4016BB

loc_4016A1:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_4016BB

loc_4016AF:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_4016BB:
add     [ebp+var_C], 1

loc_4016BF:
cmp     [ebp+var_C], 16h
jle     loc_401643
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
add     [ebp+var_8], 1

loc_4016D9:
cmp     [ebp+var_8], 3
jle     loc_40163A
mov     [ebp+var_10], 0
jmp     loc_40176F

loc_4016EF:
mov     eax, [ebp+var_10]
and     eax, 1
test    eax, eax
jnz     short loc_40175F
cmp     [ebp+var_10], 0
jz      short loc_401711
cmp     [ebp+var_10], 18h
jz      short loc_401711
cmp     [ebp+var_10], 10h
jz      short loc_401711
cmp     [ebp+var_10], 8
jnz     short loc_401751

loc_401711:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], 4
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_40605B ; "\b? "
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_40176B

loc_401751:
mov     [esp+0F4h+nStdHandle], offset asc_40605F ; "* "
call    printf
jmp     short loc_40176B

loc_40175F:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_40176B:
add     [ebp+var_10], 1

loc_40176F:
cmp     [ebp+var_10], 18h
jle     loc_4016EF
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [ebp+var_14], 3
jmp     loc_4018DE

loc_401791:
mov     [ebp+var_18], 0
jmp     short loc_401816

loc_40179A:
mov     eax, 3
sub     eax, [ebp+var_14]
cmp     [ebp+var_18], eax
jz      short loc_4017B2
mov     eax, [ebp+var_14]
add     eax, 3
cmp     [ebp+var_18], eax
jnz     short loc_401806

loc_4017B2:
cmp     [ebp+var_14], 0
jnz     short loc_4017F8
mov     dword ptr [esp+0F4h+wAttributes], 4 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_406052 ; " ?"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401812

loc_4017F8:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_401812

loc_401806:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401812:
add     [ebp+var_18], 1

loc_401816:
cmp     [ebp+var_18], 6
jle     loc_40179A
mov     [ebp+var_1C], 0
jmp     short loc_401839

loc_401829:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf
add     [ebp+var_1C], 1

loc_401839:
cmp     [ebp+var_1C], 8
jle     short loc_401829
mov     [ebp+var_20], 0
jmp     short loc_4018C4

loc_401848:
mov     eax, 3
sub     eax, [ebp+var_14]
cmp     [ebp+var_20], eax
jz      short loc_401860
mov     eax, [ebp+var_14]
add     eax, 3
cmp     [ebp+var_20], eax
jnz     short loc_4018B4

loc_401860:
cmp     [ebp+var_14], 0
jnz     short loc_4018A6
mov     dword ptr [esp+0F4h+wAttributes], 4 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_406052 ; " ?"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_4018C0

loc_4018A6:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_4018C0

loc_4018B4:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_4018C0:
add     [ebp+var_20], 1

loc_4018C4:
cmp     [ebp+var_20], 6
jle     loc_401848
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
sub     [ebp+var_14], 1

loc_4018DE:
cmp     [ebp+var_14], 0
jns     loc_401791
mov     [ebp+var_24], 1
jmp     loc_4019A1

loc_4018F4:
mov     [ebp+var_28], 0
jmp     short loc_40192D

loc_4018FD:
mov     eax, 3
sub     eax, [ebp+var_24]
cmp     [ebp+var_28], eax
jz      short loc_401915
mov     eax, [ebp+var_24]
add     eax, 3
cmp     [ebp+var_28], eax
jnz     short loc_40191C

loc_401915:
mov     eax, offset asc_406055 ; " *"
jmp     short loc_401921

loc_40191C:
mov     eax, offset asc_406058 ; "  "

loc_401921:             ; Format
mov     [esp+0F4h+nStdHandle], eax
call    printf
add     [ebp+var_28], 1

loc_40192D:
cmp     [ebp+var_28], 6
jle     short loc_4018FD
mov     [ebp+var_2C], 0
jmp     short loc_40194C

loc_40193C:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf
add     [ebp+var_2C], 1

loc_40194C:
cmp     [ebp+var_2C], 8
jle     short loc_40193C
mov     [ebp+var_30], 0
jmp     short loc_40198B

loc_40195B:
mov     eax, 3
sub     eax, [ebp+var_24]
cmp     [ebp+var_30], eax
jz      short loc_401973
mov     eax, [ebp+var_24]
add     eax, 3
cmp     [ebp+var_30], eax
jnz     short loc_40197A

loc_401973:
mov     eax, offset asc_406055 ; " *"
jmp     short loc_40197F

loc_40197A:
mov     eax, offset asc_406058 ; "  "

loc_40197F:             ; Format
mov     [esp+0F4h+nStdHandle], eax
call    printf
add     [ebp+var_30], 1

loc_40198B:
cmp     [ebp+var_30], 6
jle     short loc_40195B
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
add     [ebp+var_24], 1

loc_4019A1:
cmp     [ebp+var_24], 3
jle     loc_4018F4
mov     [ebp+var_34], 0
jmp     loc_401A37

loc_4019B7:
mov     eax, [ebp+var_34]
and     eax, 1
test    eax, eax
jnz     short loc_401A27
cmp     [ebp+var_34], 0
jz      short loc_4019D9
cmp     [ebp+var_34], 18h
jz      short loc_4019D9
cmp     [ebp+var_34], 10h
jz      short loc_4019D9
cmp     [ebp+var_34], 8
jnz     short loc_401A19

loc_4019D9:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], 4
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_40605B ; "\b? "
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401A33

loc_401A19:
mov     [esp+0F4h+nStdHandle], offset asc_40605F ; "* "
call    printf
jmp     short loc_401A33

loc_401A27:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401A33:
add     [ebp+var_34], 1

loc_401A37:
cmp     [ebp+var_34], 18h
jle     loc_4019B7
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [ebp+var_38], 3
jmp     loc_401AF8

loc_401A59:
mov     [ebp+var_3C], 0
jmp     short loc_401ADE

loc_401A62:
mov     eax, 0Bh
sub     eax, [ebp+var_38]
cmp     [ebp+var_3C], eax
jz      short loc_401A7A
mov     eax, [ebp+var_38]
add     eax, 0Bh
cmp     [ebp+var_3C], eax
jnz     short loc_401ACE

loc_401A7A:
cmp     [ebp+var_38], 0
jnz     short loc_401AC0
mov     dword ptr [esp+0F4h+wAttributes], 4 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     [esp+0F4h+nStdHandle], offset asc_406052 ; " ?"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401ADA

loc_401AC0:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_401ADA

loc_401ACE:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401ADA:
add     [ebp+var_3C], 1

loc_401ADE:
cmp     [ebp+var_3C], 16h
jle     loc_401A62
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
sub     [ebp+var_38], 1

loc_401AF8:
cmp     [ebp+var_38], 0
jns     loc_401A59
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     eax, ds:_iob
add     eax, 20h
mov     [esp+0F4h+nStdHandle], eax ; File
call    fflush
mov     [ebp+var_40], 0
jmp     loc_401BD9

loc_401B36:
mov     eax, [ebp+var_40]
lea     edx, ds:0[eax*4]
lea     eax, [ebp+var_EC]
add     eax, edx
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset aD ; " %d"
call    scanf
mov     eax, [ebp+var_40]
mov     eax, [ebp+eax*4+var_EC]
test    eax, eax
js      short loc_401B75
mov     eax, [ebp+var_40]
mov     eax, [ebp+eax*4+var_EC]
cmp     eax, 0Bh
jle     short loc_401B81

loc_401B75:             ; Code
mov     [esp+0F4h+nStdHandle], 1
call    exit

loc_401B81:
mov     eax, [ebp+var_40]
mov     eax, [ebp+eax*4+var_EC]
mov     edx, [ebp+eax*4+var_BC]
mov     eax, [ebp+var_40]
mov     [ebp+eax*4+var_EC], edx
mov     [ebp+var_44], 0
jmp     short loc_401BCD

loc_401BA5:
mov     eax, [ebp+var_44]
mov     edx, [ebp+eax*4+var_EC]
mov     eax, [ebp+var_40]
mov     eax, [ebp+eax*4+var_EC]
cmp     edx, eax
jnz     short loc_401BC9
mov     [esp+0F4h+nStdHandle], 1 ; Code
call    exit

loc_401BC9:
add     [ebp+var_44], 1

loc_401BCD:
mov     eax, [ebp+var_44]
cmp     eax, [ebp+var_40]
jl      short loc_401BA5
add     [ebp+var_40], 1

loc_401BD9:
cmp     [ebp+var_40], 0Bh
jle     loc_401B36
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [ebp+var_48], 0
mov     [ebp+var_8C], 1Ah
mov     edx, [ebp+var_E8]
mov     eax, [ebp+var_E4]
add     edx, eax
mov     eax, [ebp+var_E0]
add     edx, eax
mov     eax, [ebp+var_DC]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401C36
add     [ebp+var_48], 1

loc_401C36:
mov     edx, [ebp+var_D0]
mov     eax, [ebp+var_CC]
add     edx, eax
mov     eax, [ebp+var_C8]
add     edx, eax
mov     eax, [ebp+var_C4]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401C60
add     [ebp+var_48], 1

loc_401C60:
mov     edx, [ebp+var_EC]
mov     eax, [ebp+var_E4]
add     edx, eax
mov     eax, [ebp+var_D8]
add     edx, eax
mov     eax, [ebp+var_D0]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401C8A
add     [ebp+var_48], 1

loc_401C8A:
mov     edx, [ebp+var_EC]
mov     eax, [ebp+var_E0]
add     edx, eax
mov     eax, [ebp+var_D4]
add     edx, eax
mov     eax, [ebp+var_C4]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401CB4
add     [ebp+var_48], 1

loc_401CB4:
mov     edx, [ebp+var_E8]
mov     eax, [ebp+var_D8]
add     edx, eax
mov     eax, [ebp+var_CC]
add     edx, eax
mov     eax, [ebp+var_C0]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401CDE
add     [ebp+var_48], 1

loc_401CDE:
mov     edx, [ebp+var_DC]
mov     eax, [ebp+var_D4]
add     edx, eax
mov     eax, [ebp+var_C8]
add     edx, eax
mov     eax, [ebp+var_C0]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401D08
add     [ebp+var_48], 1

loc_401D08:
mov     edx, [ebp+var_EC]
mov     eax, [ebp+var_E8]
add     edx, eax
mov     eax, [ebp+var_DC]
add     edx, eax
mov     eax, [ebp+var_D0]
add     edx, eax
mov     eax, [ebp+var_C4]
add     edx, eax
mov     eax, [ebp+var_C0]
add     eax, edx
cmp     [ebp+var_8C], eax
jnz     short loc_401D42
add     [ebp+var_48], 1

loc_401D42:
mov     [ebp+var_4C], 0
mov     [ebp+var_50], 0
jmp     loc_401E19

loc_401D55:
mov     [ebp+var_54], 0
jmp     loc_401DFF

loc_401D61:
mov     eax, 0Bh
sub     eax, [ebp+var_50]
cmp     [ebp+var_54], eax
jz      short loc_401D79
mov     eax, [ebp+var_50]
add     eax, 0Bh
cmp     [ebp+var_54], eax
jnz     short loc_401DEF

loc_401D79:
cmp     [ebp+var_50], 0
jnz     short loc_401DE1
cmp     [ebp+var_48], 7
jnz     short loc_401D8C
mov     eax, 2
jmp     short loc_401D91

loc_401D8C:
mov     eax, 4

loc_401D91:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d ; " %02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401DFB

loc_401DE1:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_401DFB

loc_401DEF:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401DFB:
add     [ebp+var_54], 1

loc_401DFF:
cmp     [ebp+var_54], 16h
jle     loc_401D61
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
add     [ebp+var_50], 1

loc_401E19:
cmp     [ebp+var_50], 3
jle     loc_401D55
mov     [ebp+var_58], 0
jmp     loc_401ED5

loc_401E2F:
mov     eax, [ebp+var_58]
and     eax, 1
test    eax, eax
jnz     loc_401EC5
cmp     [ebp+var_58], 0
jz      short loc_401E55
cmp     [ebp+var_58], 18h
jz      short loc_401E55
cmp     [ebp+var_58], 10h
jz      short loc_401E55
cmp     [ebp+var_58], 8
jnz     short loc_401EB7

loc_401E55:
cmp     [ebp+var_48], 7
jnz     short loc_401E62
mov     eax, 2
jmp     short loc_401E67

loc_401E62:
mov     eax, 4

loc_401E67:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d_0 ; "\b%02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401ED1

loc_401EB7:
mov     [esp+0F4h+nStdHandle], offset asc_40605F ; "* "
call    printf
jmp     short loc_401ED1

loc_401EC5:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401ED1:
add     [ebp+var_58], 1

loc_401ED5:
cmp     [ebp+var_58], 18h
jle     loc_401E2F
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [ebp+var_5C], 3
jmp     loc_40208E

loc_401EF7:
mov     [ebp+var_60], 0
jmp     loc_401FA1

loc_401F03:
mov     eax, 3
sub     eax, [ebp+var_5C]
cmp     [ebp+var_60], eax
jz      short loc_401F1B
mov     eax, [ebp+var_5C]
add     eax, 3
cmp     [ebp+var_60], eax
jnz     short loc_401F91

loc_401F1B:
cmp     [ebp+var_5C], 0
jnz     short loc_401F83
cmp     [ebp+var_48], 7
jnz     short loc_401F2E
mov     eax, 2
jmp     short loc_401F33

loc_401F2E:
mov     eax, 4

loc_401F33:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d ; " %02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_401F9D

loc_401F83:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_401F9D

loc_401F91:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_401F9D:
add     [ebp+var_60], 1

loc_401FA1:
cmp     [ebp+var_60], 6
jle     loc_401F03
mov     [ebp+var_64], 0
jmp     short loc_401FC4

loc_401FB4:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf
add     [ebp+var_64], 1

loc_401FC4:
cmp     [ebp+var_64], 8
jle     short loc_401FB4
mov     [ebp+var_68], 0
jmp     loc_402074

loc_401FD6:
mov     eax, 3
sub     eax, [ebp+var_5C]
cmp     [ebp+var_68], eax
jz      short loc_401FEE
mov     eax, [ebp+var_5C]
add     eax, 3
cmp     [ebp+var_68], eax
jnz     short loc_402064

loc_401FEE:
cmp     [ebp+var_5C], 0
jnz     short loc_402056
cmp     [ebp+var_48], 7
jnz     short loc_402001
mov     eax, 2
jmp     short loc_402006

loc_402001:
mov     eax, 4

loc_402006:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d_1 ; "%02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_402070

loc_402056:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_402070

loc_402064:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_402070:
add     [ebp+var_68], 1

loc_402074:
cmp     [ebp+var_68], 6
jle     loc_401FD6
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
sub     [ebp+var_5C], 1

loc_40208E:
cmp     [ebp+var_5C], 0
jns     loc_401EF7
mov     [ebp+var_6C], 1
jmp     loc_402151

loc_4020A4:
mov     [ebp+var_70], 0
jmp     short loc_4020DD

loc_4020AD:
mov     eax, 3
sub     eax, [ebp+var_6C]
cmp     [ebp+var_70], eax
jz      short loc_4020C5
mov     eax, [ebp+var_6C]
add     eax, 3
cmp     [ebp+var_70], eax
jnz     short loc_4020CC

loc_4020C5:
mov     eax, offset asc_406055 ; " *"
jmp     short loc_4020D1

loc_4020CC:
mov     eax, offset asc_406058 ; "  "

loc_4020D1:             ; Format
mov     [esp+0F4h+nStdHandle], eax
call    printf
add     [ebp+var_70], 1

loc_4020DD:
cmp     [ebp+var_70], 6
jle     short loc_4020AD
mov     [ebp+var_74], 0
jmp     short loc_4020FC

loc_4020EC:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf
add     [ebp+var_74], 1

loc_4020FC:
cmp     [ebp+var_74], 8
jle     short loc_4020EC
mov     [ebp+var_78], 0
jmp     short loc_40213B

loc_40210B:
mov     eax, 3
sub     eax, [ebp+var_6C]
cmp     [ebp+var_78], eax
jz      short loc_402123
mov     eax, [ebp+var_6C]
add     eax, 3
cmp     [ebp+var_78], eax
jnz     short loc_40212A

loc_402123:
mov     eax, offset asc_406055 ; " *"
jmp     short loc_40212F

loc_40212A:
mov     eax, offset asc_406058 ; "  "

loc_40212F:             ; Format
mov     [esp+0F4h+nStdHandle], eax
call    printf
add     [ebp+var_78], 1

loc_40213B:
cmp     [ebp+var_78], 6
jle     short loc_40210B
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
add     [ebp+var_6C], 1

loc_402151:
cmp     [ebp+var_6C], 3
jle     loc_4020A4
mov     [ebp+var_7C], 0
jmp     loc_40220D

loc_402167:
mov     eax, [ebp+var_7C]
and     eax, 1
test    eax, eax
jnz     loc_4021FD
cmp     [ebp+var_7C], 0
jz      short loc_40218D
cmp     [ebp+var_7C], 18h
jz      short loc_40218D
cmp     [ebp+var_7C], 10h
jz      short loc_40218D
cmp     [ebp+var_7C], 8
jnz     short loc_4021EF

loc_40218D:
cmp     [ebp+var_48], 7
jnz     short loc_40219A
mov     eax, 2
jmp     short loc_40219F

loc_40219A:
mov     eax, 4

loc_40219F:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d_0 ; "\b%02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_402209

loc_4021EF:
mov     [esp+0F4h+nStdHandle], offset asc_40605F ; "* "
call    printf
jmp     short loc_402209

loc_4021FD:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_402209:
add     [ebp+var_7C], 1

loc_40220D:
cmp     [ebp+var_7C], 18h
jle     loc_402167
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [ebp+var_80], 3
jmp     loc_402302

loc_40222F:
mov     [ebp+var_84], 0
jmp     loc_4022E5

loc_40223E:
mov     eax, 0Bh
sub     eax, [ebp+var_80]
cmp     [ebp+var_84], eax
jz      short loc_40225C
mov     eax, [ebp+var_80]
add     eax, 0Bh
cmp     [ebp+var_84], eax
jnz     short loc_4022D2

loc_40225C:
cmp     [ebp+var_80], 0
jnz     short loc_4022C4
cmp     [ebp+var_48], 7
jnz     short loc_40226F
mov     eax, 2
jmp     short loc_402274

loc_40226F:
mov     eax, 4

loc_402274:             ; wAttributes
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
mov     eax, [ebp+var_4C]
lea     edx, [eax+1]
mov     [ebp+var_4C], edx
mov     eax, [ebp+eax*4+var_EC]
mov     dword ptr [esp+0F4h+wAttributes], eax
mov     [esp+0F4h+nStdHandle], offset a02d ; " %02d"
call    printf
mov     dword ptr [esp+0F4h+wAttributes], 7 ; wAttributes
mov     eax, [ebp+hConsoleOutput]
mov     [esp+0F4h+nStdHandle], eax ; hConsoleOutput
call    SetConsoleTextAttribute
sub     esp, 8
jmp     short loc_4022DE

loc_4022C4:
mov     [esp+0F4h+nStdHandle], offset asc_406055 ; " *"
call    printf
jmp     short loc_4022DE

loc_4022D2:
mov     [esp+0F4h+nStdHandle], offset asc_406058 ; "  "
call    printf

loc_4022DE:
add     [ebp+var_84], 1

loc_4022E5:
cmp     [ebp+var_84], 16h
jle     loc_40223E
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
sub     [ebp+var_80], 1

loc_402302:
cmp     [ebp+var_80], 0
jns     loc_40222F
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     [esp+0F4h+nStdHandle], 0Ah ; Ch
call    putchar
mov     eax, ds:_iob
add     eax, 20h
mov     [esp+0F4h+nStdHandle], eax ; File
call    fflush
cmp     [ebp+var_48], 7
jnz     short loc_402367
mov     eax, [ebp+var_EC]
mov     edx, eax
mov     eax, [ebp+var_D0]
add     eax, edx
mov     edx, [ebp+var_C4]
add     eax, edx
movsx   eax, al
mov     dword ptr [esp+0F4h+wAttributes], 10h
mov     [esp+0F4h+nStdHandle], eax
call    sub_401410
jmp     short loc_402373

loc_402367:             ; Code
mov     [esp+0F4h+nStdHandle], 1
call    exit

loc_402373:
mov     edi, [ebp+var_4]
leave
retn
sub_401583 endp



; Attributes: bp-based frame

sub_402378 proc near

Str= dword ptr -60h
MaxCount= dword ptr -5Ch
File= dword ptr -58h
Buf= byte ptr -54h
var_3C= byte ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
Str1= byte ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
Str2= byte ptr -24h
var_23= byte ptr -23h
var_22= byte ptr -22h
var_21= byte ptr -21h
var_20= byte ptr -20h
var_1F= byte ptr -1Fh
var_1E= byte ptr -1Eh
var_1D= byte ptr -1Dh
var_1C= byte ptr -1Ch
var_1B= byte ptr -1Bh
var_1A= byte ptr -1Ah
var_19= byte ptr -19h
var_18= byte ptr -18h
var_17= byte ptr -17h
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_12= byte ptr -12h
var_11= byte ptr -11h
var_10= byte ptr -10h
var_F= byte ptr -0Fh
var_E= byte ptr -0Eh
var_D= byte ptr -0Dh
var_C= dword ptr -0Ch
var_8= dword ptr -8

push    ebp
mov     ebp, esp
push    ebx
sub     esp, 5Ch
mov     [esp+60h+Str], offset Str ; "entered this challenge"
call    puts
mov     [ebp+Str2], 33h
mov     [ebp+var_23], 2Bh
mov     [ebp+var_22], 55h
mov     [ebp+var_21], 33h
mov     [ebp+var_20], 77h
mov     [ebp+var_1F], 61h
mov     [ebp+var_1E], 41h
mov     [ebp+var_1D], 24h
mov     [ebp+var_1C], 74h
mov     [ebp+var_1B], 4Dh
mov     [ebp+var_1A], 7Ah
mov     [ebp+var_19], 76h
mov     [ebp+var_18], 55h
mov     [ebp+var_17], 24h
mov     [ebp+var_16], 6Ch
mov     [ebp+var_15], 58h
mov     [ebp+var_14], 3Dh
mov     [ebp+var_13], 5Dh
mov     [ebp+var_12], 6Bh
mov     [ebp+var_11], 3Eh
mov     [ebp+var_10], 33h
mov     [ebp+var_F], 7Ch
mov     [ebp+var_E], 45h
mov     [ebp+var_D], 0
mov     dword ptr [ebp+Str1], 0
mov     [ebp+var_2C], 0
mov     [ebp+var_28], 0
mov     [ebp+Str1], 68h
mov     [ebp+Str1+1], 61h
mov     [ebp+Str1+2], 63h
mov     [ebp+Str1+3], 6Bh
mov     byte ptr [ebp+var_2C], 65h
mov     byte ptr [ebp+var_2C+1], 64h
mov     byte ptr [ebp+var_2C+2], 20h
mov     byte ptr [ebp+var_2C+3], 74h
mov     byte ptr [ebp+var_28], 68h
mov     byte ptr [ebp+var_28+1], 69h
mov     byte ptr [ebp+var_28+2], 73h
mov     dword ptr [ebp+var_3C], 0
mov     [ebp+var_38], 0
mov     [ebp+var_34], 0
mov     ecx, 0
mov     eax, 18h
and     eax, 0FFFFFFFCh
mov     edx, eax
mov     eax, 0

loc_402455:
mov     dword ptr [ebp+eax+Buf], ecx
add     eax, 4
cmp     eax, edx
jb      short loc_402455
mov     [esp+60h+Str], offset asc_40608E ; " "
call    scanf
mov     eax, ds:_iob
mov     [esp+60h+File], eax ; File
mov     [esp+60h+MaxCount], 24h ; MaxCount
lea     eax, [ebp+Buf]
mov     [esp+60h+Str], eax ; Buf
call    fgets
mov     [ebp+var_8], 0
lea     eax, [ebp+Str2]
mov     [esp+60h+Str], eax ; Str
call    strlen
mov     [esp+60h+File], eax ; MaxCount
lea     eax, [ebp+Str2]
mov     [esp+60h+MaxCount], eax ; Str2
lea     eax, [ebp+Buf]
mov     [esp+60h+Str], eax ; Str1
call    strncmp
test    eax, eax
jnz     short loc_4024BB
mov     [ebp+var_8], 1

loc_4024BB:
cmp     [ebp+var_8], 0
jz      short loc_40252E
lea     eax, [ebp+Str1]
mov     [esp+60h+Str], eax ; Str
call    strlen
mov     [esp+60h+File], eax ; MaxCount
lea     eax, [ebp+var_3C]
mov     [esp+60h+MaxCount], eax ; Str2
lea     eax, [ebp+Str1]
mov     [esp+60h+Str], eax ; Str1
call    strncmp
test    eax, eax
jnz     short loc_40252E
mov     [ebp+var_C], 0
jmp     short loc_402526

loc_4024EF:
mov     ebx, [ebp+var_C]
lea     eax, [ebp+Str2]
mov     [esp+60h+Str], eax ; Str
call    strlen
mov     ecx, eax
mov     eax, ebx
mov     edx, 0
div     ecx
mov     eax, edx
movzx   eax, [ebp+eax+Str2]
movsx   eax, al
mov     [esp+60h+MaxCount], 1
mov     [esp+60h+Str], eax
call    sub_401410
add     [ebp+var_C], 1

loc_402526:
cmp     [ebp+var_C], 24h
jle     short loc_4024EF
jmp     short loc_40253A

loc_40252E:             ; Code
mov     [esp+60h+Str], 1
call    exit

loc_40253A:
nop
add     esp, 5Ch
pop     ebx
pop     ebp
retn
sub_402378 endp

align 10h


; Attributes: bp-based frame

sub_402550 proc near

Str= dword ptr -58h
Type= dword ptr -54h
var_50= dword ptr -50h
var_4C= dword ptr -4Ch
var_48= byte ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
sub     esp, 4Ch
test    byte ptr dword_405060, 2
jnz     short loc_402570
call    sub_401290
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_402570:
call    GetCommandLineA
mov     [ebp+var_44], esp
mov     [esp+58h+Str], eax ; Str
mov     edi, eax
call    strlen
lea     eax, [eax+eax+11h]
shr     eax, 4
shl     eax, 4
call    sub_4030F0
xor     edx, edx
sub     esp, eax
mov     eax, dword_405060
mov     [ebp+var_1C], 0
lea     ebx, [esp+58h+var_48]
mov     [ebp+var_30], 0
and     eax, 4400h
mov     [ebp+var_3C], ebx
mov     [ebp+var_38], 0
or      eax, 10h
mov     [ebp+var_40], eax
mov     eax, ebx

loc_4025C3:
add     edi, 1
movsx   esi, byte ptr [edi-1]
mov     ebx, esi
mov     [ebp+C], esi
test    esi, esi
jz      short loc_402610

loc_4025D3:
lea     ecx, [ebx-22h]
cmp     cl, 5Dh         ; switch 94 cases
ja      loc_402762      ; jumptable 004025E2 default case
movzx   ecx, cl
jmp     ds:off_406090[ecx*4] ; switch jump
align 10h

loc_4025F0:             ; jumptable 004025E2 case 58
cmp     [ebp+var_30], 27h
jz      loc_402874
add     edi, 1
movsx   esi, byte ptr [edi-1]
add     edx, 1
mov     ebx, esi
mov     [ebp+C], esi
test    esi, esi
jnz     short loc_4025D3
lea     esi, [esi+0]

loc_402610:
test    edx, edx
jz      loc_4028A1
add     edx, eax
lea     esi, [esi+0]

loc_402620:
add     eax, 1
mov     byte ptr [eax-1], 5Ch
cmp     eax, edx
jnz     short loc_402620

loc_40262B:
cmp     [ebp+var_3C], edx
jb      loc_402830
mov     eax, [ebp+var_38]
test    eax, eax
jnz     loc_402830

loc_40263F:
mov     eax, [ebp+var_24]
mov     ds:dword_408004, eax
mov     eax, [ebp+var_20]
mov     ds:dword_408000, eax
mov     esp, [ebp+var_44]
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_402660:             ; jumptable 004025E2 case 57
lea     esi, [edx-1]
mov     [ebp+var_34], esi
test    byte ptr dword_405060, 20h
jnz     short loc_4026B6
mov     esi, 1
test    edx, edx
jz      loc_4028AF

loc_40267C:
mov     edx, [ebp+var_34]
lea     edx, [eax+edx+1]

loc_402683:
add     eax, 1
mov     byte ptr [eax-1], 5Ch
cmp     eax, edx
jnz     short loc_402683

loc_40268E:
mov     eax, esi
mov     ecx, edx
test    al, al
jz      short loc_40269C

loc_402696:
mov     byte ptr [edx], 7Fh
lea     ecx, [edx+1]

loc_40269C:
lea     eax, [ecx+1]
mov     [ecx], bl
xor     edx, edx
jmp     loc_4025C3
align 10h

loc_4026B0:             ; jumptable 004025E2 cases 8,10,29,89,91,93
lea     ecx, [edx-1]
mov     [ebp+var_34], ecx

loc_4026B6:
mov     esi, [ebp+var_30]
test    esi, esi
setnz   cl
cmp     [ebp+C], 7Fh
mov     esi, ecx
setz    byte ptr [ebp+C]
movzx   ecx, byte ptr [ebp+C]
or      esi, ecx
test    edx, edx
jnz     short loc_40267C
mov     edx, eax
jmp     short loc_40268E
align 10h

loc_4026E0:             ; jumptable 004025E2 case 5
test    byte ptr dword_405060, 10h
jz      short loc_402762 ; jumptable 004025E2 default case
mov     ecx, edx
sar     ecx, 1
jz      loc_4028A8
add     ecx, eax

loc_4026F5:
add     eax, 1
mov     byte ptr [eax-1], 5Ch
cmp     eax, ecx
jnz     short loc_4026F5

loc_402700:
cmp     [ebp+var_30], 22h
jz      short loc_40270F
and     edx, 1
jz      loc_40287F

loc_40270F:
lea     eax, [ecx+1]
mov     byte ptr [ecx], 27h
xor     edx, edx
mov     [ebp+var_38], 1
jmp     loc_4025C3

loc_402723:             ; jumptable 004025E2 case 0
mov     ecx, edx
sar     ecx, 1
jz      loc_40289A
add     ecx, eax
nop

loc_402730:
add     eax, 1
mov     byte ptr [eax-1], 5Ch
cmp     ecx, eax
jnz     short loc_402730

loc_40273B:
cmp     [ebp+var_30], 27h
jz      loc_402860
and     edx, 1
jnz     loc_402860
xor     [ebp+var_30], 22h
mov     eax, ecx
xor     edx, edx
mov     [ebp+var_38], 1
jmp     loc_4025C3

loc_402762:             ; jumptable 004025E2 default case
lea     esi, [eax+edx]
test    edx, edx
jz      loc_402893
lea     esi, [esi+0]

loc_402770:
add     eax, 1
mov     byte ptr [eax-1], 5Ch
cmp     eax, esi
jnz     short loc_402770

loc_40277B:
mov     ecx, [ebp+var_30]
test    ecx, ecx
jnz     short loc_4027DD
mov     eax, ds:__mb_cur_max
cmp     dword ptr [eax], 1
jnz     short loc_4027C0
mov     eax, ds:_pctype
mov     edx, [ebp+C]
mov     eax, [eax]
test    byte ptr [eax+edx*2], 40h
jz      short loc_4027D7

loc_40279C:
cmp     [ebp+var_3C], esi
jb      short loc_4027F0
mov     edx, [ebp+var_38]
test    edx, edx
jnz     short loc_4027F0
mov     eax, esi
xor     edx, edx
mov     [ebp+var_38], 0
jmp     loc_4025C3
align 10h

loc_4027C0:             ; Type
mov     [esp+58h+Type], 40h
mov     eax, [ebp+C]
mov     [esp+58h+Str], eax ; C
call    _isctype
test    eax, eax
jnz     short loc_40279C

loc_4027D7:
cmp     [ebp+C], 9
jz      short loc_40279C

loc_4027DD:
lea     eax, [esi+1]
mov     [esi], bl
xor     edx, edx
jmp     loc_4025C3
align 10h

loc_4027F0:
lea     eax, [ebp+var_28]
mov     byte ptr [esi], 0
mov     [esp+58h+var_4C], eax ; int
mov     [esp+58h+var_50], 0 ; int
mov     ebx, [ebp+var_40]
mov     [esp+58h+Type], ebx ; int
mov     esi, [ebp+var_3C]
or      ebx, 1
mov     [esp+58h+Str], esi ; char *
call    sub_4040F0
mov     [ebp+var_40], ebx
mov     eax, esi
xor     edx, edx
mov     [ebp+var_38], 0
jmp     loc_4025C3
align 10h

loc_402830:
lea     eax, [ebp+var_28]
mov     byte ptr [edx], 0
mov     [esp+58h+var_4C], eax ; int
mov     [esp+58h+var_50], 0 ; int
mov     eax, [ebp+var_40]
mov     [esp+58h+Type], eax ; int
mov     eax, [ebp+var_3C]
mov     [esp+58h+Str], eax ; char *
call    sub_4040F0
jmp     loc_40263F
align 10h

loc_402860:
lea     eax, [ecx+1]
mov     byte ptr [ecx], 22h
xor     edx, edx
mov     [ebp+var_38], 1
jmp     loc_4025C3

loc_402874:
mov     byte ptr [eax], 5Ch
add     eax, 1
jmp     loc_4025C3

loc_40287F:
xor     [ebp+var_30], 27h
mov     eax, ecx
xor     edx, edx
mov     [ebp+var_38], 1
jmp     loc_4025C3

loc_402893:
mov     esi, eax
jmp     loc_40277B

loc_40289A:
mov     ecx, eax
jmp     loc_40273B

loc_4028A1:
mov     edx, eax
jmp     loc_40262B

loc_4028A8:
mov     ecx, eax
jmp     loc_402700

loc_4028AF:
mov     edx, eax
jmp     loc_402696
sub_402550 endp

align 10h


; Attributes: fuzzy-sp

sub_4028C0 proc near

var_208= dword ptr -208h
var_140= dword ptr -140h

pushf
pushf
pop     eax
mov     edx, eax
xor     eax, 200000h
push    eax
popf
pushf
pop     eax
popf
xor     eax, edx
test    eax, 200000h
jz      locret_4029C5
push    ebx
xor     eax, eax
cpuid
test    eax, eax
jz      loc_4029C4
mov     eax, 1
cpuid
xor     eax, eax
test    dh, 1
jz      short loc_4028FA
or      eax, 1

loc_4028FA:
test    ch, 20h
jz      short loc_402904
or      eax, 80h

loc_402904:
test    dh, 80h
jz      short loc_40290C
or      eax, 2

loc_40290C:
test    edx, 800000h
jz      short loc_402917
or      eax, 4

loc_402917:
test    edx, 1000000h
jz      short loc_40298C
or      eax, 8
push    ebp
mov     ebp, esp
sub     esp, 200h
and     esp, 0FFFFFFF0h
fxsave  [esp+208h+var_208]
mov     ebx, [esp+208h+var_140]
xor     [esp+208h+var_140], 13C0DEh
fxrstor [esp+208h+var_208]
mov     [esp+208h+var_140], ebx
fxsave  [esp+208h+var_208]
xchg    ebx, [esp+208h+var_140]
fxrstor [esp+208h+var_208]
xor     ebx, [esp+208h+var_140]
leave
cmp     ebx, 13C0DEh
jnz     short loc_40298C
test    edx, 2000000h
jz      short loc_402979
or      eax, 10h

loc_402979:
test    edx, 4000000h
jz      short loc_402984
or      eax, 20h

loc_402984:
test    cl, 1
jz      short loc_40298C
or      eax, 40h

loc_40298C:
mov     ds:dword_408028, eax
mov     eax, 80000000h
cpuid
cmp     eax, 80000000h
jbe     short loc_4029C4
mov     eax, 80000001h
cpuid
xor     eax, eax
test    edx, edx
jns     short loc_4029B1
mov     eax, 100h

loc_4029B1:
test    edx, 40000000h
jz      short loc_4029BE
or      eax, 200h

loc_4029BE:
or      ds:dword_408028, eax

loc_4029C4:
pop     ebx

locret_4029C5:
rep retn
sub_4028C0 endp

align 10h



; void __cdecl sub_4029D0()
sub_4029D0 proc near
mov     eax, off_40506C
mov     eax, [eax]
test    eax, eax
jz      short locret_402A00
sub     esp, 0Ch
xchg    ax, ax

loc_4029E0:
call    eax
mov     eax, off_40506C
lea     edx, [eax+4]
mov     eax, [eax+4]
mov     off_40506C, edx
test    eax, eax
jnz     short loc_4029E0
add     esp, 0Ch
retn
align 10h

locret_402A00:
retn
sub_4029D0 endp

align 10h
; START OF FUNCTION CHUNK FOR sub_402A60

loc_402A10:
push    ebx
sub     esp, 18h
mov     ebx, ds:dword_404D20
cmp     ebx, 0FFFFFFFFh
jz      short loc_402A40

loc_402A1F:
test    ebx, ebx
jz      short loc_402A2F

loc_402A23:
call    ds:dword_404D20[ebx*4]
sub     ebx, 1
jnz     short loc_402A23

loc_402A2F:             ; void (__cdecl *)()
mov     [esp+1Ch+var_1C], offset sub_4029D0
call    atexit
add     esp, 18h
pop     ebx
retn

loc_402A40:
xor     ebx, ebx
jmp     short loc_402A46

loc_402A44:
mov     ebx, eax

loc_402A46:
lea     eax, [ebx+1]
mov     edx, ds:dword_404D20[eax*4]
test    edx, edx
jnz     short loc_402A44
jmp     short loc_402A1F
; END OF FUNCTION CHUNK FOR sub_402A60
align 10h



sub_402A60 proc near

var_1C= dword ptr -1Ch

; FUNCTION CHUNK AT 00402A10 SIZE 00000046 BYTES

mov     eax, ds:dword_40802C
test    eax, eax
jz      short loc_402A70
retn
align 10h

loc_402A70:
mov     ds:dword_40802C, 1
jmp     short loc_402A10
sub_402A60 endp

align 10h



public TlsCallback_1
TlsCallback_1 proc near

var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

sub     esp, 1Ch
mov     eax, [esp+1Ch+arg_4]
cmp     eax, 3
jz      short loc_402AA0
test    eax, eax
jz      short loc_402AA0
mov     eax, 1
add     esp, 1Ch
retn    0Ch
align 10h

loc_402AA0:
mov     edx, [esp+1Ch+arg_8]
mov     [esp+1Ch+var_18], eax
mov     eax, [esp+1Ch+arg_0]
mov     [esp+1Ch+var_14], edx
mov     [esp+1Ch+var_1C], eax
call    sub_402D10
mov     eax, 1
add     esp, 1Ch
retn    0Ch
TlsCallback_1 endp

align 10h



public TlsCallback_0
TlsCallback_0 proc near

var_1C= dword ptr -1Ch
var_18= dword ptr -18h
var_14= dword ptr -14h
arg_0= dword ptr  4
arg_4= dword ptr  8
arg_8= dword ptr  0Ch

push    esi
push    ebx
sub     esp, 14h
cmp     ds:dword_408068, 2
mov     eax, [esp+1Ch+arg_4]
jz      short loc_402AEC
mov     ds:dword_408068, 2

loc_402AEC:
cmp     eax, 2
jz      short loc_402B03
cmp     eax, 1
jz      short loc_402B41

loc_402AF6:
add     esp, 14h
mov     eax, 1
pop     ebx
pop     esi
retn    0Ch

loc_402B03:
mov     eax, offset dword_40A014
sub     eax, offset dword_40A014
mov     esi, eax
sar     esi, 2
test    eax, eax
jle     short loc_402AF6
xor     ebx, ebx
lea     esi, [esi+0]
nop

loc_402B20:
mov     eax, ds:dword_40A014[ebx*4]
test    eax, eax
jz      short loc_402B2D
call    eax ; dword_40A014

loc_402B2D:
add     ebx, 1
cmp     esi, ebx
jg      short loc_402B20
add     esp, 14h
mov     eax, 1
pop     ebx
pop     esi
retn    0Ch

loc_402B41:
mov     eax, [esp+1Ch+arg_8]
mov     [esp+1Ch+var_18], 1
mov     [esp+1Ch+var_14], eax
mov     eax, [esp+1Ch+arg_0]
mov     [esp+1Ch+var_1C], eax
call    sub_402D10
add     esp, 14h
mov     eax, 1
pop     ebx
pop     esi
retn    0Ch
TlsCallback_0 endp

align 10h
xor     eax, eax
retn
align 10h



sub_402B80 proc near

lpCriticalSection= dword ptr -1Ch

push    esi
push    ebx
sub     esp, 14h
mov     [esp+1Ch+lpCriticalSection], offset CriticalSection ; lpCriticalSection
call    EnterCriticalSection
mov     ebx, ds:dword_408040
sub     esp, 4
test    ebx, ebx
jz      short loc_402BCB
xchg    ax, ax

loc_402BA0:
mov     eax, [ebx]
mov     [esp+1Ch+lpCriticalSection], eax ; dwTlsIndex
call    TlsGetValue
sub     esp, 4
mov     esi, eax
call    GetLastError
test    eax, eax
jnz     short loc_402BC4
test    esi, esi
jz      short loc_402BC4
mov     eax, [ebx+4]
mov     [esp+1Ch+lpCriticalSection], esi
call    eax

loc_402BC4:
mov     ebx, [ebx+8]
test    ebx, ebx
jnz     short loc_402BA0

loc_402BCB:             ; lpCriticalSection
mov     [esp+1Ch+lpCriticalSection], offset CriticalSection
call    LeaveCriticalSection
sub     esp, 4
add     esp, 14h
pop     ebx
pop     esi
retn
sub_402B80 endp

push    esi
xor     esi, esi
push    ebx
sub     esp, 14h
mov     eax, ds:dword_408044
test    eax, eax
jnz     short loc_402C00

loc_402BF0:
add     esp, 14h
mov     eax, esi
pop     ebx
pop     esi
retn
align 10h

loc_402C00:
mov     dword ptr [esp+4], 0Ch
mov     dword ptr [esp], 1
call    calloc
mov     ebx, eax
test    eax, eax
jz      short loc_402C5B
mov     eax, [esp+20h]
mov     dword ptr [esp], offset CriticalSection
mov     [ebx], eax
mov     eax, [esp+24h]
mov     [ebx+4], eax
call    EnterCriticalSection
mov     eax, ds:dword_408040
mov     ds:dword_408040, ebx
sub     esp, 4
mov     dword ptr [esp], offset CriticalSection
mov     [ebx+8], eax
call    LeaveCriticalSection
mov     eax, esi
sub     esp, 4
add     esp, 14h
pop     ebx
pop     esi
retn

loc_402C5B:
mov     esi, 0FFFFFFFFh
jmp     short loc_402BF0
align 10h
push    ebx
sub     esp, 18h
mov     eax, ds:dword_408044
mov     ebx, [esp+20h]
test    eax, eax
jnz     short loc_402C90
add     esp, 18h
xor     eax, eax
pop     ebx
retn
align 10h

loc_402C90:
mov     dword ptr [esp], offset CriticalSection
call    EnterCriticalSection
mov     edx, ds:dword_408040
sub     esp, 4
test    edx, edx
jz      short loc_402CC0
mov     eax, [edx]
cmp     ebx, eax
jnz     short loc_402CB9
jmp     short loc_402CFF

loc_402CB1:
mov     ecx, [eax]
cmp     ecx, ebx
jz      short loc_402CE0
mov     edx, eax

loc_402CB9:
mov     eax, [edx+8]
test    eax, eax
jnz     short loc_402CB1

loc_402CC0:
mov     dword ptr [esp], offset CriticalSection
call    LeaveCriticalSection
sub     esp, 4

loc_402CCF:
add     esp, 18h
xor     eax, eax
pop     ebx
retn
align 10h

loc_402CE0:
mov     ecx, [eax+8]
mov     [edx+8], ecx

loc_402CE6:
mov     [esp], eax
call    free
mov     dword ptr [esp], offset CriticalSection
call    LeaveCriticalSection
sub     esp, 4
jmp     short loc_402CCF

loc_402CFF:
mov     eax, [edx+8]
mov     ds:dword_408040, eax
mov     eax, edx
jmp     short loc_402CE6
align 10h



sub_402D10 proc near

lpCriticalSection= dword ptr -1Ch
arg_4= dword ptr  8

sub     esp, 1Ch
mov     eax, [esp+1Ch+arg_4]
cmp     eax, 1
jz      short loc_402D70
test    eax, eax
jz      short loc_402D40
cmp     eax, 3
jnz     short loc_402D2E
mov     eax, ds:dword_408044
test    eax, eax
jnz     short loc_402DA1

loc_402D2E:
mov     eax, 1
add     esp, 1Ch
retn
align 10h

loc_402D40:
mov     eax, ds:dword_408044
test    eax, eax
jnz     short loc_402D90
mov     eax, ds:dword_408044
cmp     eax, 1
jnz     short loc_402D2E

loc_402D53:             ; lpCriticalSection
mov     [esp+1Ch+lpCriticalSection], offset CriticalSection
mov     ds:dword_408044, 0
call    DeleteCriticalSection
sub     esp, 4
jmp     short loc_402D2E
align 10h

loc_402D70:
mov     eax, ds:dword_408044
test    eax, eax
jz      short loc_402DB0

loc_402D79:
mov     ds:dword_408044, 1
mov     eax, 1
add     esp, 1Ch
retn
align 10h

loc_402D90:
call    sub_402B80
mov     eax, ds:dword_408044
cmp     eax, 1
jnz     short loc_402D2E
jmp     short loc_402D53

loc_402DA1:
call    sub_402B80
mov     eax, 1
add     esp, 1Ch
retn
align 10h

loc_402DB0:             ; lpCriticalSection
mov     [esp+1Ch+lpCriticalSection], offset CriticalSection
call    InitializeCriticalSection
sub     esp, 4
jmp     short loc_402D79
sub_402D10 endp

align 10h



; int __cdecl sub_402DD0(char *Format, char ArgList)
sub_402DD0 proc near

Str= dword ptr -1Ch
Size= dword ptr -18h
Count= dword ptr -14h
File= dword ptr -10h
Format= dword ptr  4
ArgList= byte ptr  8

push    esi
push    ebx
sub     esp, 14h
mov     eax, ds:_iob
mov     [esp+1Ch+Count], 17h ; Count
lea     esi, [esp+1Ch+ArgList]
lea     ebx, [eax+40h]
mov     [esp+1Ch+Size], 1 ; Size
mov     [esp+1Ch+File], ebx ; File
mov     [esp+1Ch+Str], offset aMingwRuntimeFa ; "Mingw runtime failure:\n"
call    fwrite
mov     eax, [esp+1Ch+Format]
mov     [esp+1Ch+Count], esi ; ArgList
mov     [esp+1Ch+Str], ebx ; File
mov     [esp+1Ch+Size], eax ; Format
call    vfprintf
call    abort
lea     esi, [esi+0]
sub_402DD0 endp ; sp-analysis failed




sub_402E20 proc near

lpAddress= dword ptr -4Ch
lpBuffer= dword ptr -48h
dwLength= dword ptr -44h
lpflOldProtect= dword ptr -40h
flOldProtect= dword ptr -3Ch
Buffer= _MEMORY_BASIC_INFORMATION ptr -38h

push    ebp
push    edi
mov     edi, edx
push    esi
mov     esi, ecx
push    ebx
mov     ebx, eax
sub     esp, 3Ch
lea     eax, [esp+4Ch+Buffer]
mov     [esp+4Ch+dwLength], 1Ch ; dwLength
mov     [esp+4Ch+lpBuffer], eax ; lpBuffer
mov     [esp+4Ch+lpAddress], ebx ; lpAddress
call    VirtualQuery
sub     esp, 0Ch
test    eax, eax
jz      loc_402EF4
mov     eax, [esp+4Ch+Buffer.Protect]
cmp     eax, 40h
jz      short loc_402E5E
cmp     eax, 4
jnz     short loc_402E80

loc_402E5E:
test    esi, esi
jz      short loc_402E72
xor     eax, eax

loc_402E64:
movzx   ecx, byte ptr [edi+eax]
mov     [ebx+eax], cl
add     eax, 1
cmp     eax, esi
jb      short loc_402E64

loc_402E72:
add     esp, 3Ch
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_402E80:
mov     eax, [esp+4Ch+Buffer.RegionSize]
lea     ebp, [esp+4Ch+flOldProtect]
mov     [esp+4Ch+dwLength], 40h ; flNewProtect
mov     [esp+4Ch+lpflOldProtect], ebp ; lpflOldProtect
mov     [esp+4Ch+lpBuffer], eax ; dwSize
mov     eax, [esp+4Ch+Buffer.BaseAddress]
mov     [esp+4Ch+lpAddress], eax ; lpAddress
call    VirtualProtect
sub     esp, 10h
mov     ecx, [esp+4Ch+Buffer.Protect]
test    esi, esi
jz      short loc_402EBF
xor     edx, edx

loc_402EB1:
movzx   eax, byte ptr [edi+edx]
mov     [ebx+edx], al
add     edx, 1
cmp     edx, esi
jb      short loc_402EB1

loc_402EBF:
cmp     ecx, 40h
jz      short loc_402E72
cmp     ecx, 4
jz      short loc_402E72
mov     eax, [esp+4Ch+flOldProtect]
mov     [esp+4Ch+lpflOldProtect], ebp ; lpflOldProtect
mov     [esp+4Ch+dwLength], eax ; flNewProtect
mov     eax, [esp+4Ch+Buffer.RegionSize]
mov     [esp+4Ch+lpBuffer], eax ; dwSize
mov     eax, [esp+4Ch+Buffer.BaseAddress]
mov     [esp+4Ch+lpAddress], eax ; lpAddress
call    VirtualProtect
sub     esp, 10h
add     esp, 3Ch
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_402EF4:
mov     [esp+4Ch+dwLength], ebx
mov     [esp+4Ch+lpBuffer], 1Ch ; ArgList
mov     [esp+4Ch+lpAddress], offset aVirtualqueryFa ; "  VirtualQuery failed for %d bytes at a"...
call    sub_402DD0
lea     esi, [esi+0]
sub_402E20 endp ; sp-analysis failed




sub_402F10 proc near

Format= dword ptr -3Ch
ArgList= byte ptr -38h
var_20= dword ptr -20h

mov     eax, ds:dword_408060
test    eax, eax
jz      short loc_402F20

locret_402F19:
retn
align 10h

loc_402F20:
mov     ds:dword_408060, 1
mov     eax, offset dword_406474
sub     eax, offset dword_406474
cmp     eax, 7
jle     short locret_402F19
push    ebp
push    edi
push    esi
push    ebx
sub     esp, 2Ch
mov     edx, ds:dword_406474
cmp     eax, 0Bh
jg      loc_402FD0
mov     ebx, offset dword_406474

loc_402F54:
test    edx, edx
jnz     loc_403085
mov     eax, [ebx+4]

loc_402F5F:
test    eax, eax
jnz     loc_403085
mov     eax, [ebx+8]
cmp     eax, 1
jnz     loc_4030DA

loc_402F73:
add     ebx, 0Ch
cmp     ebx, offset dword_406474
jnb     short loc_402FC8

loc_402F7E:
mov     edx, [ebx]
mov     esi, [ebx+4]
movzx   ecx, byte ptr [ebx+8]
lea     edi, [edx+400000h]
lea     eax, [esi+400000h]
mov     edx, [edx+400000h]
cmp     ecx, 10h
jz      loc_403020
cmp     ecx, 20h
jnz     short loc_403000
sub     edx, edi
add     edx, [eax]
mov     ecx, 4
add     ebx, 0Ch
mov     [esp+3Ch+var_20], edx
lea     edx, [esp+3Ch+var_20]
call    sub_402E20
cmp     ebx, offset dword_406474
jb      short loc_402F7E

loc_402FC8:
add     esp, 2Ch
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_402FD0:
test    edx, edx
jnz     loc_403080
mov     eax, ds:dword_406478
mov     edi, eax
or      edi, ds:dword_40647C
jnz     loc_4030D0
mov     edx, ds:dword_406480
mov     ebx, offset dword_406480
jmp     loc_402F54
align 10h

loc_403000:
cmp     ecx, 8
jz      short loc_403051
mov     dword ptr [esp+3Ch+ArgList], ecx ; ArgList
mov     [esp+3Ch+Format], offset aUnknownPseudoR ; "  Unknown pseudo relocation bit size %d"...
mov     [esp+3Ch+var_20], 0
call    sub_402DD0
lea     esi, [esi+0]

loc_403020:
movzx   ebp, word ptr [esi+400000h]
mov     ecx, ebp
or      ecx, 0FFFF0000h
test    bp, bp
js      short loc_403036
mov     ecx, ebp

loc_403036:
sub     ecx, edi
add     edx, ecx
mov     ecx, 2
mov     [esp+3Ch+var_20], edx
lea     edx, [esp+3Ch+var_20]
call    sub_402E20
jmp     loc_402F73

loc_403051:
movzx   esi, byte ptr [eax]
mov     ecx, esi
test    cl, cl
jns     short loc_403060
or      esi, 0FFFFFF00h

loc_403060:
sub     esi, edi
mov     ecx, 1
add     edx, esi
mov     [esp+3Ch+var_20], edx
lea     edx, [esp+3Ch+var_20]
call    sub_402E20
jmp     loc_402F73
align 10h

loc_403080:
mov     ebx, offset dword_406474

loc_403085:
cmp     ebx, offset dword_406474
jnb     loc_402FC8

loc_403091:
mov     ecx, [ebx+4]
mov     edx, [ebx]
add     ebx, 8
add     edx, [ecx+400000h]
lea     eax, [ecx+400000h]
mov     ecx, 4
mov     [esp+3Ch+var_20], edx
lea     edx, [esp+3Ch+var_20]
call    sub_402E20
cmp     ebx, offset dword_406474
jb      short loc_403091
add     esp, 2Ch
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_4030D0:
mov     ebx, offset dword_406474
jmp     loc_402F5F

loc_4030DA:             ; ArgList
mov     dword ptr [esp+3Ch+ArgList], eax
mov     [esp+3Ch+Format], offset aUnknownPseudoR_0 ; "  Unknown pseudo relocation protocol ve"...
call    sub_402DD0
nop
nop
nop
nop
nop
nop
sub_402F10 endp ; sp-analysis failed




sub_4030F0 proc near

arg_0= byte ptr  4

push    ecx
push    eax
cmp     eax, 1000h
lea     ecx, [esp+8+arg_0]
jb      short loc_403112

loc_4030FD:
sub     ecx, 1000h
or      dword ptr [ecx], 0
sub     eax, 1000h
cmp     eax, 1000h
ja      short loc_4030FD

loc_403112:
sub     ecx, eax
or      dword ptr [ecx], 0
pop     eax
pop     ecx
retn
sub_4030F0 endp

align 10h



sub_403120 proc near

var_10= dword ptr -10h
arg_0= dword ptr  4

sub     esp, 1Ch
mov     eax, [esp+1Ch+arg_0]
mov     [esp+1Ch+var_10], 1F80h
cmp     eax, 0FFFFFFFDh
jz      short loc_403180
cmp     eax, 0FFFFFFFCh
jz      short loc_403165
test    eax, eax
jz      short loc_403190

loc_40313D:
cmp     eax, 0FFFFFFFFh
jz      short loc_40318A
cmp     eax, 0FFFFFFFEh
jz      short loc_40316F
fldenv  byte ptr [eax]
movzx   eax, word ptr [eax+1Ch]
mov     [esp+1Ch+var_10], eax

loc_403151:
test    byte ptr ds:dword_408028, 10h
jz      short loc_40315F
ldmxcsr [esp+1Ch+var_10]

loc_40315F:
xor     eax, eax
add     esp, 1Ch
retn

loc_403165:
mov     dword_405070, 0FFFFFFFEh

loc_40316F:
call    ds:_fpreset
jmp     short loc_403151
align 10h

loc_403180:
mov     dword_405070, 0FFFFFFFFh

loc_40318A:
fninit
jmp     short loc_403151
align 10h

loc_403190:
mov     eax, dword_405070
jmp     short loc_40313D
sub_403120 endp

align 10h



sub_4031A0 proc near

C= dword ptr -4Ch
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h

push    ebp
mov     ebp, ecx
push    edi
push    esi
mov     esi, edx
push    ebx
sub     esp, 3Ch
movsx   ebx, byte ptr [eax]
mov     edi, ebx
cmp     ebx, 2Dh
jz      loc_403293
mov     ecx, eax
cmp     ebx, 5Dh
jz      loc_403293

loc_4031C4:
mov     [esp+4Ch+var_24], ebp
and     ebp, 4000h
mov     [esp+4Ch+var_30], esi
mov     [esp+4Ch+var_2C], ebp
jmp     short loc_4031EF
align 10h

loc_4031E0:
mov     ebx, edi
sub     ebx, [esp+4Ch+var_30]
test    ebx, ebx
jz      short loc_403251

loc_4031EA:
mov     eax, ebp
movsx   ebx, al

loc_4031EF:
lea     esi, [ecx+1]
cmp     ebx, 5Dh
jz      loc_4032C1
cmp     ebx, 2Dh
jz      loc_4032B0
test    ebx, ebx
jz      loc_4032C1

loc_40320C:
cmp     ebx, 2Fh
jz      loc_4032C1
cmp     ebx, 5Ch
jz      loc_4032C1
movzx   ebp, byte ptr [esi]
mov     ecx, esi
mov     edi, ebx

loc_403225:
mov     eax, [esp+4Ch+var_2C]
test    eax, eax
jnz     short loc_4031E0
mov     [esp+4Ch+C], edi ; C
mov     [esp+4Ch+var_28], ecx
call    tolower
mov     ebx, eax
mov     eax, [esp+4Ch+var_30]
mov     [esp+4Ch+C], eax ; C
call    tolower
mov     ecx, [esp+4Ch+var_28]
sub     ebx, eax
test    ebx, ebx
jnz     short loc_4031EA

loc_403251:
mov     ebx, [esp+4Ch+var_24]
mov     edx, ebp
and     ebx, 20h

loc_40325A:
lea     eax, [ecx+1]
cmp     dl, 5Dh
jz      short loc_4032C3
cmp     dl, 7Fh
jz      short loc_40327E

loc_403267:
test    dl, dl
jz      short loc_4032C1
movzx   edx, byte ptr [ecx+1]
mov     ecx, eax
lea     eax, [ecx+1]
cmp     dl, 5Dh
jz      short loc_4032C3
cmp     dl, 7Fh
jnz     short loc_403267

loc_40327E:
movzx   edx, byte ptr [ecx+1]
test    ebx, ebx
jnz     loc_4034A0
lea     esi, [ecx+2]
mov     ecx, eax
mov     eax, esi
jmp     short loc_403267

loc_403293:
lea     ecx, [eax+1]
movzx   edx, byte ptr [eax+1]
cmp     ebx, esi
jz      loc_403450
movsx   ebx, dl
jmp     loc_4031C4
align 10h

loc_4032B0:
movzx   ebp, byte ptr [ecx+1]
mov     eax, ebp
cmp     al, 5Dh
jz      short loc_4032D0
movsx   ebx, al
test    ebx, ebx
jnz     short loc_4032E0

loc_4032C1:
xor     eax, eax

loc_4032C3:
add     esp, 3Ch
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_4032D0:
mov     ecx, esi
mov     edi, 2Dh
jmp     loc_403225
align 10h

loc_4032E0:
lea     esi, [ecx+2]
mov     ebp, edi
cmp     edi, ebx
jge     loc_40339D
mov     [esp+4Ch+var_20], esi
mov     esi, ebp
mov     [esp+4Ch+var_28], ecx
jmp     short loc_403312
align 10h

loc_403300:
sub     esi, [esp+4Ch+var_30]
test    esi, esi
jz      short loc_40333B

loc_403308:
mov     esi, edi
cmp     ebx, edi
jz      loc_403393

loc_403312:
mov     edx, [esp+4Ch+var_2C]
lea     edi, [esi+1]
mov     ebp, edi
test    edx, edx
jnz     short loc_403300
mov     [esp+4Ch+C], esi ; C
call    tolower
mov     esi, eax
mov     eax, [esp+4Ch+var_30]
mov     [esp+4Ch+C], eax ; C
call    tolower
sub     esi, eax
test    esi, esi
jnz     short loc_403308

loc_40333B:
mov     ecx, [esp+4Ch+var_28]
mov     esi, [esp+4Ch+var_20]
movzx   edx, byte ptr [ecx+2]
mov     ecx, [esp+4Ch+var_24]
and     ecx, 20h

loc_40334E:
lea     eax, [esi+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jz      short loc_40337E

loc_40335F:
test    dl, dl
jz      loc_4032C1
movzx   edx, byte ptr [esi+1]
mov     esi, eax
lea     eax, [esi+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jnz     short loc_40335F

loc_40337E:
movzx   edx, byte ptr [esi+1]
test    ecx, ecx
jnz     loc_403440
lea     ebx, [esi+2]
mov     esi, eax
mov     eax, ebx
jmp     short loc_40335F

loc_403393:
mov     ecx, [esp+4Ch+var_28]
mov     esi, [esp+4Ch+var_20]
mov     edi, ebp

loc_40339D:
cmp     edi, ebx
jle     loc_40320C
mov     [esp+4Ch+var_20], ecx
mov     ebp, [esp+4Ch+var_2C]
mov     [esp+4Ch+var_28], esi
jmp     short loc_4033C8

loc_4033B3:
mov     esi, edi
sub     esi, [esp+4Ch+var_30]
test    esi, esi
jz      short loc_4033E8

loc_4033BD:
sub     edi, 1
cmp     ebx, edi
jz      loc_4034C0

loc_4033C8:
test    ebp, ebp
jnz     short loc_4033B3
mov     [esp+4Ch+C], edi ; C
call    tolower
mov     esi, eax
mov     eax, [esp+4Ch+var_30]
mov     [esp+4Ch+C], eax ; C
call    tolower
sub     esi, eax
test    esi, esi
jnz     short loc_4033BD

loc_4033E8:
mov     ecx, [esp+4Ch+var_20]
mov     esi, [esp+4Ch+var_28]
movzx   edx, byte ptr [ecx+2]
mov     ecx, [esp+4Ch+var_24]
and     ecx, 20h

loc_4033FB:
lea     eax, [esi+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jz      short loc_40342B

loc_40340C:
test    dl, dl
jz      loc_4032C1
movzx   edx, byte ptr [esi+1]
mov     esi, eax
lea     eax, [esi+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jnz     short loc_40340C

loc_40342B:
movzx   edx, byte ptr [esi+1]
test    ecx, ecx
jnz     short loc_4034B0
lea     ebx, [esi+2]
mov     esi, eax
mov     eax, ebx
jmp     short loc_40340C
align 10h

loc_403440:
mov     esi, eax
jmp     loc_40334E
align 10h

loc_403450:
and     ebp, 20h

loc_403453:
lea     eax, [ecx+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jz      short loc_403483

loc_403464:
test    dl, dl
jz      loc_4032C1
movzx   edx, byte ptr [ecx+1]
mov     ecx, eax
lea     eax, [ecx+1]
cmp     dl, 5Dh
jz      loc_4032C3
cmp     dl, 7Fh
jnz     short loc_403464

loc_403483:
movzx   edx, byte ptr [ecx+1]
test    ebp, ebp
jnz     short loc_403494
lea     ebx, [ecx+2]
mov     ecx, eax
mov     eax, ebx
jmp     short loc_403464

loc_403494:
mov     ecx, eax
jmp     short loc_403453
align 10h

loc_4034A0:
mov     ecx, eax
jmp     loc_40325A
align 10h

loc_4034B0:
mov     esi, eax
jmp     loc_4033FB
align 10h

loc_4034C0:
mov     esi, [esp+4Ch+var_28]
jmp     loc_40320C
sub_4031A0 endp

align 10h



sub_4034D0 proc near

C= dword ptr -3Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h

push    ebp
push    edi
mov     edi, eax
push    esi
push    ebx
sub     esp, 2Ch
cmp     byte ptr [edx], 2Eh
movsx   eax, byte ptr [eax]
mov     [esp+3Ch+var_28], ecx
jz      loc_403610

loc_4034E9:
mov     ecx, [esp+3Ch+var_28]
mov     esi, edx
and     ecx, 20h
mov     [esp+3Ch+var_24], ecx
mov     ecx, eax

loc_4034F8:
movsx   edx, cl
mov     ebp, esi
lea     eax, [edi+1]
test    edx, edx
jz      loc_403664
cmp     cl, 3Fh
jz      loc_4035F0
cmp     cl, 5Bh
jz      loc_4035C0
cmp     cl, 2Ah
jz      short loc_403572
test    byte ptr [esp+3Ch+var_28], 20h
jnz     short loc_40352F
cmp     edx, 7Fh
jz      loc_403650

loc_40352F:
mov     edi, eax

loc_403531:
movsx   ebx, byte ptr [esi]
test    bl, bl
jz      short loc_403568
test    [esp+3Ch+var_28], 4000h
jnz     loc_403600
mov     [esp+3Ch+C], edx ; C
mov     [esp+3Ch+var_20], edx
call    tolower
mov     [esp+3Ch+C], ebx ; C
mov     ebp, eax
call    tolower
mov     edx, [esp+3Ch+var_20]
sub     ebp, eax

loc_403562:
test    ebp, ebp
jz      short loc_4035E4
sub     edx, ebx

loc_403568:
add     esp, 2Ch
mov     eax, edx
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_403572:
mov     ebx, eax
movzx   eax, byte ptr [edi+1]
cmp     al, 2Ah
jnz     short loc_40358A
lea     esi, [esi+0]

loc_403580:
add     ebx, 1
movzx   eax, byte ptr [ebx]
cmp     al, 2Ah
jz      short loc_403580

loc_40358A:
xor     edx, edx
test    al, al
jz      short loc_403568
mov     esi, [esp+3Ch+var_28]
or      esi, 10000h

loc_40359A:
mov     ecx, esi
mov     edx, ebp
mov     eax, ebx
call    sub_4034D0
test    eax, eax
jz      short loc_4035B2
add     ebp, 1
cmp     byte ptr [ebp-1], 0
jnz     short loc_40359A

loc_4035B2:
add     esp, 2Ch
mov     edx, eax
pop     ebx
mov     eax, edx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_4035C0:
movsx   edx, byte ptr [esi]
test    edx, edx
jz      loc_4036CB
cmp     byte ptr [edi+1], 21h
jz      short loc_403630
mov     ecx, [esp+3Ch+var_28]
call    sub_4031A0
mov     edi, eax

loc_4035DC:
test    edi, edi
jz      loc_4036C1

loc_4035E4:
movzx   ecx, byte ptr [edi]
add     esi, 1
jmp     loc_4034F8
align 10h

loc_4035F0:
cmp     byte ptr [esi], 0
jz      loc_4036D5
mov     edi, eax
jmp     short loc_4035E4
align 10h

loc_403600:
mov     ebp, edx
sub     ebp, ebx
jmp     loc_403562
align 10h

loc_403610:
cmp     al, 2Eh
jz      loc_4034E9
test    [esp+3Ch+var_28], 10000h
jnz     loc_4034E9
lea     edx, [eax-2Eh]
jmp     loc_403568
align 10h

loc_403630:
lea     ebx, [edi+2]
mov     ecx, [esp+3Ch+var_28]
mov     eax, ebx
call    sub_4031A0
test    eax, eax
jz      short loc_40366E
mov     edi, ebx
jmp     short loc_4035DC
align 10h

loc_403650:
movsx   edx, byte ptr [edi+1]
add     edi, 2
test    edx, edx
jnz     loc_403531
jmp     loc_40352F

loc_403664:
movsx   edx, byte ptr [esi]
neg     edx
jmp     loc_403568

loc_40366E:
movzx   eax, byte ptr [edi+2]
cmp     al, 5Dh
jnz     short loc_403680
movzx   eax, byte ptr [edi+3]
lea     ebx, [edi+3]
lea     esi, [esi+0]

loc_403680:
lea     edi, [ebx+1]
cmp     al, 5Dh
jz      loc_4035DC
cmp     al, 7Fh
jz      short loc_4036A8

loc_40368F:
test    al, al
jz      short loc_4036C1
movzx   eax, byte ptr [ebx+1]
mov     ebx, edi
lea     edi, [ebx+1]
cmp     al, 5Dh
jz      loc_4035DC
cmp     al, 7Fh
jnz     short loc_40368F

loc_4036A8:
mov     edx, [esp+3Ch+var_24]
movzx   eax, byte ptr [ebx+1]
test    edx, edx
jnz     short loc_4036BD
lea     edx, [ebx+2]
mov     ebx, edi
mov     edi, edx
jmp     short loc_40368F

loc_4036BD:
mov     ebx, edi
jmp     short loc_403680

loc_4036C1:
mov     edx, 5Dh
jmp     loc_403568

loc_4036CB:
mov     edx, 5Bh
jmp     loc_403568

loc_4036D5:
mov     edx, 3Fh
jmp     loc_403568
sub_4034D0 endp

align 10h



sub_4036E0 proc near
push    esi
mov     esi, edx
shr     esi, 5
push    ebx
xor     ebx, ebx
xor     esi, 1
lea     esi, [esi+0]

loc_4036F0:
movsx   ecx, byte ptr [eax]
lea     edx, [eax+1]
test    ecx, ecx
jz      short loc_403729

loc_4036FA:
test    esi, 1
jz      short loc_403707
cmp     ecx, 7Fh
jz      short loc_403750

loc_403707:
test    ebx, ebx
jnz     short loc_403730
cmp     ecx, 2Ah
jz      short loc_403760
cmp     ecx, 3Fh
jz      short loc_403760

loc_403715:
mov     eax, edx
xor     ebx, ebx
cmp     ecx, 5Bh
movsx   ecx, byte ptr [eax]
setz    bl
lea     edx, [eax+1]
test    ecx, ecx
jnz     short loc_4036FA

loc_403729:
mov     eax, ecx
pop     ebx
pop     esi
retn
align 10h

loc_403730:
cmp     ebx, 1
jle     short loc_40373A
cmp     ecx, 5Dh
jz      short loc_403760

loc_40373A:
mov     eax, edx
cmp     ecx, 21h
jz      short loc_4036F0

loc_403741:
add     ebx, 1
mov     eax, edx
jmp     short loc_4036F0
align 10h

loc_403750:
cmp     byte ptr [eax+1], 0
lea     edx, [eax+2]
jz      short loc_40376A
test    ebx, ebx
jz      short loc_403715
jmp     short loc_403741
align 10h

loc_403760:
mov     ecx, 1
pop     ebx
pop     esi
mov     eax, ecx
retn

loc_40376A:
xor     ecx, ecx
jmp     short loc_403729
sub_4036E0 endp

align 10h



sub_403770 proc near

Size= dword ptr -1Ch

push    esi
mov     esi, eax
push    ebx
sub     esp, 14h
mov     eax, [eax+0Ch]
lea     ebx, [eax+1]
lea     eax, ds:0[ebx*4]
mov     [esp+1Ch+Size], eax ; Size
call    malloc
mov     [esi+8], eax
test    eax, eax
jz      short loc_4037B4
mov     dword ptr [esi+4], 0
test    ebx, ebx
jle     short loc_4037AC
xchg    ax, ax

loc_4037A0:
sub     ebx, 1
mov     dword ptr [eax+ebx*4], 0
jnz     short loc_4037A0

loc_4037AC:
add     esp, 14h
xor     eax, eax
pop     ebx
pop     esi
retn

loc_4037B4:
add     esp, 14h
mov     eax, 3
pop     ebx
pop     esi
retn
sub_403770 endp

align 10h



sub_4037C0 proc near

Memory= dword ptr -1Ch
NewSize= dword ptr -18h

push    edi
push    esi
mov     esi, eax
push    ebx
mov     ebx, edx
sub     esp, 10h
mov     eax, [edx+0Ch]
add     eax, [edx+4]
lea     eax, ds:8[eax*4]
mov     [esp+1Ch+NewSize], eax ; NewSize
mov     eax, [edx+8]
mov     [esp+1Ch+Memory], eax ; Memory
call    realloc
test    eax, eax
jz      short loc_403810
mov     ecx, [ebx+4]
mov     edx, [ebx+0Ch]
mov     [ebx+8], eax
lea     edi, [ecx+1]
add     ecx, edx
add     edx, edi
mov     [ebx+4], edi
mov     [eax+ecx*4], esi
mov     dword ptr [eax+edx*4], 0
add     esp, 10h
xor     eax, eax
pop     ebx
pop     esi
pop     edi
retn

loc_403810:
add     esp, 10h
mov     eax, 1
pop     ebx
pop     esi
pop     edi
retn
sub_4037C0 endp

align 10h



sub_403820 proc near

Memory= dword ptr -1Ch

push    esi
mov     esi, edx
push    ebx
mov     ebx, eax
sub     esp, 14h
mov     eax, [eax]
test    eax, eax
jz      short loc_403834
call    sub_403820

loc_403834:
mov     eax, [ebx+8]
test    eax, eax
jz      short loc_40383F
test    esi, esi
jnz     short loc_403860

loc_40383F:
mov     eax, [ebx+4]
test    eax, eax
jz      short loc_40384D
mov     edx, esi
call    sub_403820

loc_40384D:             ; Memory
mov     [esp+1Ch+Memory], ebx
call    free
add     esp, 14h
pop     ebx
pop     esi
retn
align 10h

loc_403860:
mov     edx, esi
call    sub_4037C0
jmp     short loc_40383F
sub_403820 endp

align 10h


; Attributes: bp-based frame

sub_403870 proc near

Str= dword ptr -78h
Src= dword ptr -74h
Size= dword ptr -70h
Dst= byte ptr -6Ch
var_65= byte ptr -65h
var_64= dword ptr -64h
var_60= dword ptr -60h
var_5C= dword ptr -5Ch
var_58= dword ptr -58h
var_54= dword ptr -54h
var_50= dword ptr -50h
var_4C= dword ptr -4Ch
var_48= dword ptr -48h
var_44= dword ptr -44h
var_40= dword ptr -40h
var_3C= dword ptr -3Ch
var_38= dword ptr -38h
var_34= dword ptr -34h
var_30= dword ptr -30h
var_2C= dword ptr -2Ch
var_28= byte ptr -28h
Memory= dword ptr -20h
var_1C= dword ptr -1Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
sub     esp, 6Ch
mov     [ebp+var_30], edx
and     edx, 400h
mov     [ebp+var_34], eax
mov     [ebp+var_38], ecx
jnz     loc_403B70

loc_40388E:
mov     edi, [ebp+var_34]
mov     [ebp+var_48], esp
mov     [esp+78h+Str], edi ; Str
call    strlen
lea     edx, [eax+1]
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
sub     esp, eax
lea     eax, [esp+78h+Dst]
mov     [esp+78h+Size], edx ; Size
mov     [esp+78h+Src], edi ; Src
mov     [esp+78h+Str], eax ; Dst
call    memcpy
mov     [esp+78h+Str], eax ; char *
call    sub_404230
mov     [ebp+var_1C], 0
mov     [ebp+var_44], eax
mov     edi, eax
lea     eax, [ebp+var_28]
call    sub_403770
mov     [ebp+var_2C], eax
test    eax, eax
jnz     loc_403C80
test    edi, edi
jz      short loc_403900
mov     edx, [ebp+var_30]
mov     eax, edi
call    sub_4036E0
test    eax, eax
jnz     loc_403ED7

loc_403900:
mov     esi, [ebp+var_44]
mov     ebx, esp
mov     [esp+78h+Str], esi ; Str
call    strlen
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
sub     esp, eax
mov     edx, esi
lea     edi, [esp+78h+Dst]
mov     ecx, edi

loc_403925:
movzx   eax, byte ptr [edx]
lea     esi, [edx+1]
cmp     al, 7Fh
jnz     short loc_403936
movzx   eax, byte ptr [edx+1]
lea     esi, [edx+2]

loc_403936:
add     ecx, 1
mov     [ecx-1], al
mov     edx, esi
test    al, al
jnz     short loc_403925
mov     [esp+78h+Str], edi ; Src
call    _strdup
mov     esp, ebx
mov     [ebp+var_2C], 1
test    eax, eax
jz      loc_403C80
lea     edx, [ebp+var_28]
call    sub_4037C0
mov     [ebp+var_2C], eax

loc_403966:
mov     ecx, [ebp+var_2C]
test    ecx, ecx
jnz     loc_403C80
mov     eax, [ebp+var_34]
movzx   eax, byte ptr [eax+1]
cmp     al, 2Fh
jz      loc_403C96
cmp     al, 5Ch
jz      loc_403C96
mov     esi, [ebp+var_44]
mov     edi, offset asc_4062B8 ; "."
mov     ecx, 2
repe cmpsb
setnbe  al
sbb     al, 0
test    al, al
jnz     loc_403C96
test    byte ptr [ebp+var_30], 10h
jnz     loc_403F26

loc_4039AE:
mov     [ebp+var_65], 5Ch
mov     [ebp+var_44], 0

loc_4039B9:
mov     edi, [ebp+Memory]
mov     [ebp+var_2C], 2
mov     eax, [edi]
test    eax, eax
jz      loc_403F9D
mov     ecx, [ebp+var_30]
and     ecx, 8000h
mov     [ebp+var_40], ecx
jmp     short loc_403A22
align 10h

loc_4039E0:
test    byte ptr [ebp+var_30], 4
jnz     short loc_403A03
mov     esi, [ebp+var_38]
test    esi, esi
jz      short loc_403A0A
call    _errno
mov     eax, [eax]
mov     [esp+78h+Src], eax
mov     eax, [edi]
mov     [esp+78h+Str], eax
call    esi
test    eax, eax
jz      short loc_403A0A

loc_403A03:
mov     [ebp+var_2C], 1

loc_403A0A:
add     edi, 4
mov     eax, [edi-4]
mov     [esp+78h+Str], eax ; Memory
call    free
mov     eax, [edi]
test    eax, eax
jz      loc_403FAD

loc_403A22:
cmp     [ebp+var_2C], 1
jz      short loc_403A03
mov     [esp+78h+Str], eax ; char *
call    sub_4047B0
mov     [ebp+var_3C], eax
test    eax, eax
jz      short loc_4039E0
mov     eax, [ebp+var_44]
mov     [ebp+var_4C], 0
test    eax, eax
jz      short loc_403A52
mov     eax, [edi]
mov     [esp+78h+Str], eax ; Str
call    strlen
mov     [ebp+var_4C], eax

loc_403A52:
mov     eax, [ebp+var_4C]
mov     [ebp+var_50], 0
add     eax, 2
mov     [ebp+var_64], eax

loc_403A62:
mov     eax, [ebp+var_3C]
mov     [esp+78h+Str], eax
call    sub_4049B0
mov     ebx, eax
test    eax, eax
jz      loc_403F00
mov     esi, [ebp+var_40]
test    esi, esi
jz      short loc_403A84
cmp     dword ptr [ebx+8], 10h
jnz     short loc_403A62

loc_403A84:
lea     esi, [ebx+0Ch]
mov     ecx, [ebp+var_30]
mov     eax, [ebp+var_34]
mov     edx, esi
call    sub_4034D0
test    eax, eax
jnz     short loc_403A62
movzx   ecx, word ptr [ebx+6]
mov     eax, [ebp+var_64]
mov     [ebp+var_54], esp
lea     eax, [ecx+eax+0Fh]
shr     eax, 4
shl     eax, 4
call    sub_4030F0
mov     ebx, [ebp+var_4C]
sub     esp, eax
lea     edx, [esp+78h+Dst]
mov     [ebp+var_5C], edx
mov     eax, edx
test    ebx, ebx
jnz     loc_403FB2

loc_403AC7:
add     ecx, 1
mov     [ebp+var_60], edx
mov     [esp+78h+Size], ecx ; Size
mov     [esp+78h+Src], esi ; Src
mov     [esp+78h+Str], eax ; Dst
call    memcpy
mov     edx, [ebp+var_60]
mov     [ebp+var_58], esp
mov     [esp+78h+Str], edx ; Str
call    strlen
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
mov     ebx, [ebp+var_5C]
sub     esp, eax
lea     esi, [esp+78h+Dst]
mov     edx, esi

loc_403B04:
movzx   eax, byte ptr [ebx]
lea     ecx, [ebx+1]
cmp     al, 7Fh
jnz     short loc_403B15
movzx   eax, byte ptr [ebx+1]
lea     ecx, [ebx+2]

loc_403B15:
add     edx, 1
mov     [edx-1], al
mov     ebx, ecx
test    al, al
jnz     short loc_403B04
mov     [esp+78h+Str], esi ; Src
call    _strdup
mov     esp, [ebp+var_58]
mov     esi, eax
test    eax, eax
jz      loc_403FFB
mov     ecx, [ebp+var_2C]
xor     eax, eax
cmp     ecx, 2
setz    al
sub     eax, 1
and     ecx, eax
mov     [ebp+var_2C], ecx
test    byte ptr [ebp+var_30], 40h
jz      loc_404007
mov     edx, [ebp+arg_0]
test    edx, edx
jnz     loc_404085

loc_403B5E:
mov     esp, [ebp+var_54]
jmp     loc_403A62
align 10h

loc_403B70:
mov     [ebp+var_44], esp
mov     esi, eax
mov     [esp+78h+Str], eax ; Str
call    strlen
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
movzx   ebx, byte ptr [esi]
sub     esp, eax
lea     edi, [esp+78h+Dst]
mov     [ebp+var_40], edi

loc_403B97:
lea     ecx, [esi+1]
cmp     bl, 7Fh
jz      short loc_403BC1

loc_403B9F:
cmp     bl, 7Bh
jz      short loc_403BF0

loc_403BA4:
lea     eax, [edi+1]
mov     [edi], bl
test    bl, bl
jz      loc_403C8E
movzx   ebx, byte ptr [esi+1]
mov     esi, ecx
mov     edi, eax
lea     ecx, [esi+1]
cmp     bl, 7Fh
jnz     short loc_403B9F

loc_403BC1:
movzx   ebx, byte ptr [esi+1]
mov     byte ptr [edi], 7Fh
test    bl, bl
jnz     short loc_403BE0
lea     eax, [esi+2]
add     edi, 1
mov     esi, ecx
mov     ecx, eax
jmp     short loc_403BA4
align 10h

loc_403BE0:
mov     [edi+1], bl
add     esi, 2
movzx   ebx, byte ptr [esi]
add     edi, 2
jmp     short loc_403B97
align 10h

loc_403BF0:
movzx   ebx, byte ptr [esi+1]
mov     [ebp+var_3C], 2Ch
mov     edx, esi
mov     [ebp+var_2C], 1
mov     [ebp+var_48], esi
mov     eax, ebx

loc_403C09:
lea     esi, [edx+1]
cmp     al, 2Ch
jz      short loc_403C31

loc_403C10:
jle     short loc_403C50
cmp     al, 7Bh
jz      short loc_403C74
cmp     al, 7Dh
jnz     short loc_403C61
sub     [ebp+var_2C], 1
jz      loc_403D33

loc_403C24:
movzx   eax, byte ptr [edx+2]
mov     edx, esi
lea     esi, [edx+1]
cmp     al, 2Ch
jnz     short loc_403C10

loc_403C31:
cmp     [ebp+var_2C], 1
jnz     short loc_403C24
movzx   eax, byte ptr [edx+2]
mov     [ebp+var_3C], 7Bh
mov     edx, esi
jmp     short loc_403C09
align 10h

loc_403C50:
test    al, al
jnz     short loc_403C61

loc_403C54:
mov     byte ptr [edi], 7Bh
mov     esi, ecx
add     edi, 1
jmp     loc_403B97

loc_403C61:
cmp     al, 7Fh
jnz     short loc_403C24
cmp     byte ptr [edx+2], 0
jz      short loc_403C54
movzx   eax, byte ptr [edx+3]
add     edx, 2
jmp     short loc_403C09

loc_403C74:
movzx   eax, byte ptr [edx+2]
add     [ebp+var_2C], 1
mov     edx, esi
jmp     short loc_403C09

loc_403C80:
mov     esp, [ebp+var_48]

loc_403C83:
mov     eax, [ebp+var_2C]
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_403C8E:
mov     esp, [ebp+var_44]
jmp     loc_40388E

loc_403C96:
mov     eax, [ebp+var_44]
mov     [esp+78h+Str], eax ; Str
call    strlen
mov     ecx, [ebp+var_34]
add     eax, ecx
movzx   edx, byte ptr [eax]
mov     [ebp+var_65], dl
cmp     ecx, eax
jnb     loc_403EF6
cmp     dl, 2Fh
jz      loc_403EF6
cmp     dl, 5Ch
jnz     short loc_403CE2
jmp     loc_403EF6
align 10h

loc_403CD0:
cmp     dl, 2Fh
jz      loc_40409E
cmp     dl, 5Ch
jz      loc_40409E

loc_403CE2:
sub     eax, 1
movzx   edx, byte ptr [eax]
cmp     ecx, eax
jnz     short loc_403CD0
mov     [ebp+var_65], dl

loc_403CEF:
movzx   eax, [ebp+var_65]
cmp     al, 5Ch
jz      short loc_403CFF
cmp     al, 2Fh
jnz     loc_4040A9

loc_403CFF:
movzx   esi, [ebp+var_65]
mov     edx, [ebp+var_34]
jmp     short loc_403D12
align 10h

loc_403D10:
mov     esi, eax

loc_403D12:
add     edx, 1
movzx   eax, byte ptr [edx]
cmp     al, 2Fh
setz    bl
cmp     al, 5Ch
setz    cl
or      bl, cl
jnz     short loc_403D10
mov     eax, esi
mov     [ebp+var_34], edx
mov     [ebp+var_65], al
jmp     loc_4039B9

loc_403D33:
cmp     [ebp+var_3C], 7Bh
mov     esi, [ebp+var_48]
jnz     loc_403C54
mov     [ebp+var_2C], edi
mov     edi, [ebp+var_30]
lea     esi, [esi+0]
lea     esi, [esi+0]

loc_403D50:
mov     eax, [ebp+var_2C]
mov     edx, 1
cmp     bl, 7Fh
jz      loc_403DFB

loc_403D61:
add     esi, 1
mov     ecx, eax

loc_403D66:
cmp     bl, 7Dh
jz      short loc_403DE3
cmp     bl, 2Ch
jnz     loc_403E20
cmp     edx, 1
jnz     loc_403E20
mov     eax, 1
mov     ebx, esi
mov     [ebp+var_30], esi
mov     esi, eax
lea     esi, [esi+0]

loc_403D90:
movzx   edx, byte ptr [ebx+1]
lea     eax, [ebx+1]
cmp     dl, 7Fh
jnz     short loc_403DC5
cmp     byte ptr [ebx+2], 0
jnz     short loc_403DBA
jmp     loc_403EC0
align 10h

loc_403DB0:
cmp     byte ptr [eax+1], 0
jz      loc_403EC0

loc_403DBA:
add     eax, 2
movzx   edx, byte ptr [eax]
cmp     dl, 7Fh
jz      short loc_403DB0

loc_403DC5:
cmp     dl, 7Bh
jz      loc_403EA0
cmp     dl, 7Dh
jz      loc_403EB0
test    dl, dl
jz      loc_403EC0

loc_403DDF:
mov     ebx, eax
jmp     short loc_403D90

loc_403DE3:
sub     edx, 1
jz      short loc_403E60
mov     byte ptr [ecx], 7Dh
lea     eax, [ecx+1]

loc_403DEE:
movzx   ebx, byte ptr [esi+1]
cmp     bl, 7Fh
jnz     loc_403D61

loc_403DFB:
movzx   ebx, byte ptr [esi+2]
mov     byte ptr [eax], 7Fh
lea     ecx, [eax+2]
mov     [eax+1], bl
test    bl, bl
jz      short loc_403E40
movzx   ebx, byte ptr [esi+3]
add     esi, 3
jmp     loc_403D66
align 10h

loc_403E20:
lea     eax, [ecx+1]
cmp     bl, 7Bh
jnz     short loc_403E30
add     edx, 1
mov     byte ptr [ecx], 7Bh
jmp     short loc_403DEE

loc_403E30:
mov     [ecx], bl
test    bl, bl
jnz     short loc_403DEE
jmp     short loc_403E44
align 10h

loc_403E40:
mov     byte ptr [eax+2], 0

loc_403E44:
mov     [ebp+var_2C], 1

loc_403E4B:
mov     eax, [ebp+var_2C]
mov     esp, [ebp+var_44]
lea     esp, [ebp-0Ch]
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_403E60:
mov     eax, esi

loc_403E62:
add     eax, 1

loc_403E65:
movzx   edx, byte ptr [eax]
add     ecx, 1
add     eax, 1
mov     [ecx-1], dl
test    dl, dl
jnz     short loc_403E65
mov     eax, [ebp+arg_0]
mov     edx, edi
or      edi, 1
mov     [esp+78h+Str], eax
mov     ecx, [ebp+var_38]
mov     eax, [ebp+var_40]
call    sub_403870
cmp     eax, 1
jz      short loc_403E44
cmp     byte ptr [esi], 2Ch
jnz     short loc_403ECF
movzx   ebx, byte ptr [esi+1]
jmp     loc_403D50
align 10h

loc_403EA0:
add     esi, 1
mov     ebx, eax
jmp     loc_403D90
align 10h

loc_403EB0:
sub     esi, 1
jnz     loc_403DDF
mov     esi, [ebp+var_30]
jmp     short loc_403E62
align 10h

loc_403EC0:
mov     byte ptr [ecx], 0
mov     [ebp+var_2C], 1
jmp     loc_403E4B

loc_403ECF:
mov     [ebp+var_2C], eax
jmp     loc_403E4B

loc_403ED7:
lea     eax, [ebp+var_28]
mov     edx, [ebp+var_30]
mov     [esp+78h+Str], eax
mov     ecx, [ebp+var_38]
mov     eax, [ebp+var_44]
or      dh, 80h
call    sub_403870
mov     [ebp+var_2C], eax
jmp     loc_403966

loc_403EF6:
mov     [ebp+var_34], eax
jmp     loc_403CEF
align 10h

loc_403F00:
mov     eax, [ebp+var_3C]
mov     [esp+78h+Str], eax ; Memory
call    sub_404A00
mov     eax, [ebp+var_50]
test    eax, eax
jz      loc_403A0A
mov     edx, [ebp+arg_0]
mov     eax, [ebp+var_50]
call    sub_403820
jmp     loc_403A0A

loc_403F26:
mov     edi, [ebp+var_34]
mov     edx, [ebp+var_30]
mov     eax, edi
call    sub_4036E0
mov     [ebp+var_2C], eax
test    eax, eax
jnz     loc_4039AE
mov     [esp+78h+Str], edi ; Str
mov     esi, esp
call    strlen
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
sub     esp, eax
mov     ecx, edi
lea     ebx, [esp+78h+Dst]
mov     edx, ebx

loc_403F60:
movzx   eax, byte ptr [ecx]
lea     edi, [ecx+1]
cmp     al, 7Fh
jnz     short loc_403F71
movzx   eax, byte ptr [ecx+1]
lea     edi, [ecx+2]

loc_403F71:
add     edx, 1
mov     [edx-1], al
mov     ecx, edi
test    al, al
jnz     short loc_403F60
mov     [esp+78h+Str], ebx ; Src
call    _strdup
mov     esp, esi
test    eax, eax
jz      short loc_403FAD
mov     edx, [ebp+arg_0]
test    edx, edx
jz      short loc_403FAD
mov     edx, [ebp+arg_0]
call    sub_4037C0
mov     edi, [ebp+Memory]

loc_403F9D:             ; Memory
mov     [esp+78h+Str], edi
call    free
mov     esp, [ebp+var_48]
jmp     loc_403C83

loc_403FAD:
mov     edi, [ebp+Memory]
jmp     short loc_403F9D

loc_403FB2:
mov     ebx, [ebp+var_4C]
mov     eax, [edi]
mov     [ebp+var_60], ecx
mov     [esp+78h+Str], edx ; Dst
mov     [esp+78h+Size], ebx ; Size
mov     [esp+78h+Src], eax ; Src
mov     [ebp+var_58], edx
call    memcpy
movzx   eax, byte ptr [esp+ebx+78h+Size+3]
mov     edx, [ebp+var_58]
mov     ecx, [ebp+var_60]
cmp     al, 2Fh
jz      loc_404094
cmp     al, 5Ch
jz      loc_404094
mov     ebx, [ebp+var_4C]
movzx   eax, [ebp+var_65]
mov     [edx+ebx], al
lea     eax, [edx+ebx+1]
jmp     loc_403AC7

loc_403FFB:
mov     [ebp+var_2C], 3
jmp     loc_403B5E

loc_404007:
mov     ebx, [ebp+var_50]
test    ebx, ebx
jz      loc_4040B9
mov     eax, [ebp+var_30]
mov     [ebp+var_58], edi
and     eax, 4000h
mov     edi, eax
jmp     short loc_404037

loc_404021:
call    strcoll

loc_404026:
mov     edx, [ebx]
mov     ecx, [ebx+4]
test    eax, eax
jg      short loc_404031
mov     ecx, edx

loc_404031:
test    ecx, ecx
jz      short loc_40404C
mov     ebx, ecx

loc_404037:
mov     eax, [ebx+8]
mov     [esp+78h+Str], esi ; Str1
mov     [esp+78h+Src], eax ; Str2
test    edi, edi
jnz     short loc_404021
call    _stricoll
jmp     short loc_404026

loc_40404C:
mov     edi, [ebp+var_58]
mov     [ebp+var_58], eax
mov     [esp+78h+Str], 0Ch ; Size
call    malloc
mov     edx, [ebp+var_58]
test    eax, eax
jz      loc_403B5E
mov     [eax+8], esi
mov     dword ptr [eax+4], 0
mov     dword ptr [eax], 0
test    edx, edx
jle     short loc_4040B2
mov     [ebx+4], eax
jmp     loc_403B5E

loc_404085:
mov     edx, [ebp+arg_0]
mov     eax, esi
call    sub_4037C0
jmp     loc_403B5E

loc_404094:
mov     eax, [ebp+var_4C]
add     eax, edx
jmp     loc_403AC7

loc_40409E:
mov     [ebp+var_65], dl
mov     [ebp+var_34], eax
jmp     loc_403CEF

loc_4040A9:
mov     [ebp+var_65], 5Ch
jmp     loc_4039B9

loc_4040B2:
mov     [ebx], eax
jmp     loc_403B5E

loc_4040B9:             ; Size
mov     [esp+78h+Str], 0Ch
call    malloc
mov     [ebp+var_50], eax
test    eax, eax
jz      loc_403B5E
mov     eax, [ebp+var_50]
mov     [eax+8], esi
mov     dword ptr [eax+4], 0
mov     dword ptr [eax], 0
jmp     loc_403B5E
sub_403870 endp

align 10h


; Attributes: bp-based frame

; int __cdecl sub_4040F0(char *, int, int, int)
sub_4040F0 proc near

Str= dword ptr -38h
var_34= byte ptr -34h
var_24= dword ptr -24h
Src= dword ptr -20h
var_1C= dword ptr -1Ch
arg_0= dword ptr  8
arg_4= dword ptr  0Ch
arg_8= dword ptr  10h
arg_C= dword ptr  14h

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
sub     esp, 2Ch
mov     esi, [ebp+arg_C]
mov     ebx, [ebp+arg_0]
mov     edi, [ebp+arg_4]
test    esi, esi
jz      short loc_40410E
test    edi, 2
jz      short loc_404143

loc_40410E:
cmp     dword ptr [esi], offset aGlob10Mingw32 ; "glob-1.0-mingw32"
jz      short loc_404123
mov     eax, esi
call    sub_403770
mov     dword ptr [esi], offset aGlob10Mingw32 ; "glob-1.0-mingw32"

loc_404123:
mov     [esp+38h+Str], esi
mov     ecx, [ebp+arg_8]
mov     edx, edi
mov     eax, ebx
call    sub_403870
mov     ecx, eax
cmp     eax, 2
jz      short loc_404150

loc_404139:
lea     esp, [ebp-0Ch]
mov     eax, ecx
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_404143:
mov     dword ptr [esi+0Ch], 0
jmp     short loc_40410E
align 10h

loc_404150:
and     edi, 10h
jz      short loc_404139
mov     [ebp+var_24], eax
mov     [ebp+var_1C], esp
mov     [esp+38h+Str], ebx ; Str
call    strlen
add     eax, 10h
shr     eax, 4
shl     eax, 4
call    sub_4030F0
mov     ecx, [ebp+var_24]
sub     esp, eax
lea     eax, [esp+38h+var_34]
mov     [ebp+Src], eax
mov     edx, eax
nop

loc_404180:
movzx   eax, byte ptr [ebx]
lea     edi, [ebx+1]
cmp     al, 7Fh
jnz     short loc_404191
movzx   eax, byte ptr [ebx+1]
lea     edi, [ebx+2]

loc_404191:
add     edx, 1
mov     [edx-1], al
mov     ebx, edi
test    al, al
jnz     short loc_404180
mov     eax, [ebp+Src]
mov     [ebp+var_24], ecx
mov     [esp+38h+Str], eax ; Src
call    _strdup
mov     esp, [ebp+var_1C]
mov     ecx, [ebp+var_24]
test    eax, eax
jz      short loc_404139
mov     edx, esi
mov     [ebp+var_1C], ecx
call    sub_4037C0
mov     ecx, [ebp+var_1C]
jmp     loc_404139
sub_4040F0 endp

align 10h
push    edi
push    esi
push    ebx
sub     esp, 10h
mov     esi, [esp+20h]
cmp     dword ptr [esi], offset aGlob10Mingw32 ; "glob-1.0-mingw32"
jz      short loc_4041F0
add     esp, 10h
pop     ebx
pop     esi
pop     edi
retn
align 10h

loc_4041F0:
mov     edi, [esi+4]
mov     ebx, [esi+0Ch]
test    edi, edi
jle     short loc_404215
add     edi, ebx
lea     esi, [esi+0]

loc_404200:
mov     eax, [esi+8]
mov     eax, [eax+ebx*4]
add     ebx, 1
mov     [esp], eax
call    free
cmp     edi, ebx
jnz     short loc_404200

loc_404215:
mov     eax, [esi+8]
mov     [esp+20h], eax
add     esp, 10h
pop     ebx
pop     esi
pop     edi
jmp     free
align 10h


; Attributes: bp-based frame

; int __cdecl sub_404230(char *)
sub_404230 proc near

Src= dword ptr -38h
Source= dword ptr -34h
MaxCount= dword ptr -30h
Dest= word ptr -2Ch
var_28= dword ptr -28h
var_24= dword ptr -24h
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
Memory= dword ptr -0Ch
arg_0= dword ptr  8

push    ebp
mov     ebp, esp
push    edi
push    esi
push    ebx
sub     esp, 2Ch
mov     [esp+38h+Source], 0
mov     [esp+38h+Src], 2
call    setlocale
mov     ebx, eax
test    eax, eax
jz      short loc_40425D
mov     [esp+38h+Src], eax ; Src
call    _strdup
mov     ebx, eax

loc_40425D:
mov     [esp+38h+Source], offset unk_4062CC
mov     [esp+38h+Src], 2
call    setlocale
mov     ecx, [ebp+arg_0]
test    ecx, ecx
jz      short loc_404280
mov     eax, [ebp+arg_0]
cmp     byte ptr [eax], 0
jnz     short loc_4042F1

loc_404280:             ; MaxCount
mov     [esp+38h+MaxCount], 0
mov     [esp+38h+Source], offset Source ; "."
mov     [esp+38h+Src], 0 ; Dest
call    wcstombs
lea     esi, [eax+1]
mov     [esp+38h+Source], esi ; NewSize
mov     eax, ds:Memory
mov     [esp+38h+Src], eax ; Memory
call    realloc
mov     ds:Memory, eax
mov     [esp+38h+MaxCount], esi ; MaxCount
mov     [esp+38h+Source], offset Source ; "."
mov     [esp+38h+Src], eax ; Dest
call    wcstombs
mov     [esp+38h+Source], ebx
mov     [esp+38h+Src], 2
call    setlocale
mov     [esp+0Ch+Memory], ebx ; Memory
call    free
mov     esi, ds:Memory

loc_4042E7:
lea     esp, [ebp-0Ch]
mov     eax, esi
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_4042F1:
mov     [ebp+var_24], esp
mov     [esp+38h+MaxCount], 0 ; MaxCount
mov     eax, [ebp+arg_0]
mov     [esp+38h+Src], 0 ; Dest
mov     [esp+38h+Source], eax ; Source
call    mbstowcs
mov     edx, eax
lea     eax, [eax+eax+11h]
shr     eax, 4
shl     eax, 4
call    sub_4030F0
sub     esp, eax
lea     edi, [esp+38h+Dest]
mov     [ebp+var_20], edi
mov     [esp+38h+MaxCount], edx ; MaxCount
mov     eax, [ebp+arg_0]
mov     [esp+38h+Src], edi ; Dest
mov     [esp+38h+Source], eax ; Source
call    mbstowcs
xor     edx, edx
mov     [ebp+var_28], eax
mov     [edi+eax*2], dx
cmp     eax, 1
jbe     short loc_404382
mov     eax, [ebp+var_20]
mov     ecx, [ebp+var_20]
movzx   edi, word ptr [eax]
movzx   eax, word ptr [eax+2]
mov     [ebp+var_1C], ecx
cmp     di, 2Fh
jz      loc_404550
cmp     di, 5Ch
jz      loc_404550
cmp     ax, 3Ah
jnz     short loc_40438A
mov     eax, ecx
lea     ecx, [ecx+4]
mov     [ebp+var_1C], ecx
movzx   edi, word ptr [eax+4]
jmp     short loc_40438A

loc_404382:
mov     eax, edi
movzx   edi, word ptr [edi]
mov     [ebp+var_1C], eax

loc_40438A:
test    di, di
jnz     short loc_4043A0
mov     esp, [ebp+var_24]
jmp     loc_404280
align 10h

loc_4043A0:
mov     eax, [ebp+var_1C]
mov     edx, edi
mov     esi, eax
jmp     short loc_4043C4
align 10h

loc_4043B0:
mov     ecx, eax
cmp     dx, 5Ch
jz      short loc_4043CA

loc_4043B8:
movzx   edx, word ptr [ecx+2]
add     eax, 2
test    dx, dx
jz      short loc_404400

loc_4043C4:
cmp     dx, 2Fh
jnz     short loc_4043B0

loc_4043CA:
movzx   edx, word ptr [eax]
cmp     dx, 5Ch
jz      short loc_4043E0
cmp     dx, 2Fh
jnz     short loc_4043F2
lea     esi, [esi+0]

loc_4043E0:
add     eax, 2
movzx   edx, word ptr [eax]
cmp     dx, 2Fh
jz      short loc_4043E0
cmp     dx, 5Ch
jz      short loc_4043E0

loc_4043F2:
mov     ecx, eax
test    dx, dx
jz      short loc_404400
mov     esi, eax
jmp     short loc_4043B8
align 10h

loc_404400:
cmp     [ebp+var_1C], esi
jb      loc_404492
cmp     di, 2Fh
jz      short loc_404420
cmp     di, 5Ch
jz      short loc_404420
mov     eax, [ebp+var_1C]
mov     ecx, 2Eh
mov     [eax], cx

loc_404420:
mov     eax, [ebp+var_1C]
xor     edx, edx
mov     [eax+2], dx
mov     [esp+38h+MaxCount], 0 ; MaxCount
mov     eax, [ebp+var_20]
mov     [esp+38h+Src], 0 ; Dest
mov     [esp+38h+Source], eax ; Source
call    wcstombs
lea     edi, [eax+1]
mov     [esp+38h+Source], edi ; NewSize
mov     eax, ds:Memory
mov     [esp+38h+Src], eax ; Memory
call    realloc
mov     ds:Memory, eax
mov     esi, eax
mov     [esp+38h+MaxCount], edi ; MaxCount
mov     eax, [ebp+var_20]
mov     [esp+38h+Src], esi ; Dest
mov     [esp+38h+Source], eax ; Source
call    wcstombs

loc_404472:
mov     [esp+38h+Source], ebx
mov     [esp+38h+Src], 2
call    setlocale
mov     [esp+38h+Src], ebx ; Memory
call    free

loc_40448A:
mov     esp, [ebp+var_24]
jmp     loc_4042E7

loc_404492:
lea     eax, [esi-2]
cmp     [ebp+var_1C], eax
jnb     loc_4045B7
movzx   edx, word ptr [esi-2]
mov     esi, eax
cmp     dx, 2Fh
jz      short loc_404492
cmp     dx, 5Ch
jz      short loc_404492

loc_4044B0:
xor     edi, edi
mov     ecx, [ebp+var_20]
mov     [eax+2], di
mov     eax, [ebp+var_20]
movzx   esi, word ptr [eax]
cmp     si, 5Ch
jz      short loc_4044D0
cmp     si, 2Fh
jnz     loc_404600
nop

loc_4044D0:
add     ecx, 2
movzx   eax, word ptr [ecx]
cmp     ax, 2Fh
jz      short loc_4044D0
cmp     ax, 5Ch
jz      short loc_4044D0
mov     eax, ecx
sub     eax, [ebp+var_20]
cmp     eax, 4
jle     loc_404600

loc_4044F0:
mov     ecx, [ebp+var_20]

loc_4044F3:
mov     edi, ecx
jmp     short loc_404511
align 10h

loc_404500:
lea     eax, [edi+2]
movzx   edx, word ptr [edi+2]
cmp     si, 5Ch
jz      short loc_404528

loc_40450D:
mov     esi, edx
mov     edi, eax

loc_404511:
test    si, si
jz      short loc_404584
add     ecx, 2
mov     [ecx-2], si
cmp     si, 2Fh
jnz     short loc_404500
movzx   edx, word ptr [edi]
mov     eax, edi

loc_404528:
cmp     dx, 5Ch
jz      short loc_404534
cmp     dx, 2Fh
jnz     short loc_40450D

loc_404534:
add     eax, 2
movzx   edx, word ptr [eax]
cmp     dx, 2Fh
jz      short loc_404534
cmp     dx, 5Ch
jz      short loc_404534
jmp     short loc_40450D
align 10h

loc_404550:
cmp     di, ax
jnz     loc_40438A
cmp     word ptr [ecx+4], 0
jnz     loc_40438A
mov     [esp+38h+Source], ebx
mov     [esp+38h+Src], 2
call    setlocale
mov     [esp+38h+Src], ebx ; Memory
call    free
mov     esi, [ebp+arg_0]
jmp     loc_40448A

loc_404584:
mov     eax, [ebp+var_28]
xor     esi, esi
mov     [ecx], si
mov     [esp+38h+MaxCount], eax ; MaxCount
mov     eax, [ebp+var_20]
mov     [esp+38h+Source], eax ; Source
mov     eax, [ebp+arg_0]
mov     [esp+38h+Src], eax ; Dest
call    wcstombs
mov     esi, [ebp+arg_0]
cmp     eax, 0FFFFFFFFh
jz      loc_404472
mov     byte ptr [esi+eax], 0
jmp     loc_404472

loc_4045B7:
jnz     loc_4044B0
cmp     di, 2Fh
jz      short loc_4045CD
cmp     di, 5Ch
jnz     loc_4044B0

loc_4045CD:
cmp     [eax+2], di
jnz     loc_4044B0
movzx   edx, word ptr [eax+4]
cmp     dx, 5Ch
jz      loc_4044B0
cmp     dx, 2Fh
jz      loc_4044B0
mov     eax, esi
jmp     loc_4044B0
align 10h

loc_404600:
mov     eax, [ebp+var_20]
cmp     [eax+2], si
jnz     loc_4044F0
movzx   esi, word ptr [ecx]
jmp     loc_4044F3
sub_404230 endp

align 10h



sub_404620 proc near

lpFileName= dword ptr -15Ch
lpFindFileData= dword ptr -158h
FindFileData= _WIN32_FIND_DATAA ptr -14Ch

push    esi
push    ebx
mov     ebx, edx
sub     esp, 154h
lea     edx, [esp+15Ch+FindFileData]
mov     [esp+15Ch+lpFileName], eax ; lpFileName
mov     [esp+15Ch+lpFindFileData], edx ; lpFindFileData
call    FindFirstFileA
sub     esp, 8
mov     esi, eax
cmp     eax, 0FFFFFFFFh
jz      short loc_4046A2
xor     eax, eax
lea     ecx, [ebx+0Ch]
mov     [ebx+6], ax
xor     eax, eax
jmp     short loc_404663

loc_404651:
movzx   eax, word ptr [ebx+6]
add     eax, 1
mov     [ebx+6], ax
cmp     ax, 104h
adc     ecx, 0

loc_404663:
movzx   eax, ax
movzx   eax, [esp+eax+15Ch+FindFileData.cFileName]
mov     [ecx], al
test    al, al
jnz     short loc_404651
mov     eax, [esp+15Ch+FindFileData.dwFileAttributes]
and     al, 58h
cmp     eax, 10h
ja      short loc_404690
mov     [ebx+8], eax

loc_40467F:
add     esp, 154h
mov     eax, esi
pop     ebx
pop     esi
retn
align 10h

loc_404690:
mov     dword ptr [ebx+8], 18h
add     esp, 154h
mov     eax, esi
pop     ebx
pop     esi
retn

loc_4046A2:
call    GetLastError
mov     ebx, eax
call    _errno
mov     [eax], ebx
cmp     ebx, 3
jz      short loc_4046D9
call    _errno
cmp     dword ptr [eax], 10Bh
jz      short loc_4046E6
call    _errno
cmp     dword ptr [eax], 2
jz      short loc_40467F
call    _errno
mov     dword ptr [eax], 16h
jmp     short loc_40467F

loc_4046D9:
call    _errno
mov     dword ptr [eax], 2
jmp     short loc_40467F

loc_4046E6:
call    _errno
mov     dword ptr [eax], 14h
jmp     short loc_40467F
sub_404620 endp

align 10h



sub_404700 proc near

hFindFile= dword ptr -15Ch
lpFindFileData= dword ptr -158h
FindFileData= _WIN32_FIND_DATAA ptr -14Ch

push    esi
push    ebx
mov     ebx, edx
sub     esp, 154h
lea     edx, [esp+15Ch+FindFileData]
mov     [esp+15Ch+hFindFile], eax ; hFindFile
mov     [esp+15Ch+lpFindFileData], edx ; lpFindFileData
call    FindNextFileA
sub     esp, 8
mov     esi, eax
test    eax, eax
jz      short loc_404782
xor     eax, eax
lea     ecx, [ebx+0Ch]
mov     [ebx+6], ax
xor     eax, eax
jmp     short loc_404742

loc_404730:
movzx   eax, word ptr [ebx+6]
add     eax, 1
mov     [ebx+6], ax
cmp     ax, 104h
adc     ecx, 0

loc_404742:
movzx   eax, ax
movzx   eax, [esp+eax+15Ch+FindFileData.cFileName]
mov     [ecx], al
test    al, al
jnz     short loc_404730
mov     eax, [esp+15Ch+FindFileData.dwFileAttributes]
and     al, 58h
cmp     eax, 10h
ja      short loc_404770
mov     [ebx+8], eax

loc_40475E:
add     esp, 154h
mov     eax, esi
pop     ebx
pop     esi
retn
align 10h

loc_404770:
mov     dword ptr [ebx+8], 18h
add     esp, 154h
mov     eax, esi
pop     ebx
pop     esi
retn

loc_404782:
call    GetLastError
cmp     eax, 12h
jz      short loc_40475E
call    _errno
mov     dword ptr [eax], 2
add     esp, 154h
mov     eax, esi
pop     ebx
pop     esi
retn
sub_404700 endp

align 10h



; int __cdecl sub_4047B0(char *)
sub_4047B0 proc near

FullPath= dword ptr -13Ch
Path= dword ptr -138h
SizeInBytes= dword ptr -134h
var_121= byte ptr -121h
var_120= byte ptr -120h
arg_0= dword ptr  4

push    ebp
push    edi
push    esi
push    ebx
sub     esp, 12Ch
mov     eax, [esp+13Ch+arg_0]
test    eax, eax
jz      loc_404980
cmp     byte ptr [eax], 0
jz      loc_404950
lea     esi, [esp+13Ch+var_120]
mov     [esp+13Ch+SizeInBytes], 104h ; SizeInBytes
mov     [esp+13Ch+Path], eax ; Path
mov     [esp+13Ch+FullPath], esi ; FullPath
call    _fullpath
cmp     [esp+13Ch+var_120], 0
mov     edx, esi
jz      short loc_404840

loc_4047F3:
mov     ecx, [edx]
add     edx, 4
lea     eax, [ecx-1010101h]
not     ecx
and     eax, ecx
and     eax, 80808080h
jz      short loc_4047F3
test    eax, 8080h
jz      loc_404940

loc_404814:
mov     ebx, eax
add     bl, al
sbb     edx, 3
sub     edx, esi
movzx   ecx, [esp+edx+13Ch+var_121]
lea     eax, [esi+edx]
cmp     cl, 2Fh
jz      short loc_40486A
cmp     cl, 5Ch
jz      short loc_40486A
mov     ecx, 5Ch
mov     [eax], cx
lea     eax, [esi+edx+1]
jmp     short loc_40486A
align 10h

loc_404840:
mov     ecx, [edx]
add     edx, 4
lea     eax, [ecx-1010101h]
not     ecx
and     eax, ecx
and     eax, 80808080h
jz      short loc_404840
test    eax, 8080h
jz      loc_404930

loc_404861:
mov     ebx, eax
add     bl, al
mov     eax, edx
sbb     eax, 3

loc_40486A:
mov     edx, 2Ah
mov     ebx, esi
mov     [eax], dx

loc_404874:
mov     edx, [ebx]
add     ebx, 4
lea     eax, [edx-1010101h]
not     edx
and     eax, edx
and     eax, 80808080h
jz      short loc_404874
test    eax, 8080h
jnz     short loc_404897
shr     eax, 10h
add     ebx, 2

loc_404897:
mov     ecx, eax
add     cl, al
sbb     ebx, 3
sub     ebx, esi
lea     eax, [ebx+11Ch]
mov     [esp+13Ch+FullPath], eax ; Size
call    malloc
mov     ebp, eax
test    eax, eax
jz      loc_404970
lea     ecx, [ebx+1]
lea     eax, [eax+118h]
cmp     ecx, 4
jb      short loc_404914
mov     edx, [esp+ecx+18h]
shr     ebx, 2
mov     edi, eax
mov     [eax+ecx-4], edx
mov     ecx, ebx
rep movsd

loc_4048D7:
mov     edx, ebp
call    sub_404620
mov     [ebp+110h], eax
cmp     eax, 0FFFFFFFFh
jz      loc_404992
mov     eax, 110h
mov     dword ptr [ebp+0], 0
mov     dword ptr [ebp+114h], 0
mov     [ebp+4], ax

loc_404907:
add     esp, 12Ch
mov     eax, ebp
pop     ebx
pop     esi
pop     edi
pop     ebp
retn

loc_404914:
test    ecx, ecx
jz      short loc_4048D7
movzx   edx, byte ptr [esi]
mov     [eax], dl
test    cl, 2
jz      short loc_4048D7
movzx   edx, word ptr [esi+ecx-2]
mov     [eax+ecx-2], dx
jmp     short loc_4048D7
align 10h

loc_404930:
shr     eax, 10h
add     edx, 2
jmp     loc_404861
align 10h

loc_404940:
shr     eax, 10h
add     edx, 2
jmp     loc_404814
align 10h

loc_404950:
call    _errno
xor     ebp, ebp
mov     dword ptr [eax], 2
add     esp, 12Ch
mov     eax, ebp
pop     ebx
pop     esi
pop     edi
pop     ebp
retn
align 10h

loc_404970:
call    _errno
mov     dword ptr [eax], 0Ch
jmp     short loc_404907
align 10h

loc_404980:
call    _errno
xor     ebp, ebp
mov     dword ptr [eax], 16h
jmp     loc_404907

loc_404992:             ; Memory
mov     [esp+13Ch+FullPath], ebp
xor     ebp, ebp
call    free
jmp     loc_404907
sub_4047B0 endp

align 10h



sub_4049B0 proc near

arg_0= dword ptr  4

push    ebx
sub     esp, 8
mov     eax, [esp+0Ch+arg_0]
test    eax, eax
jz      short loc_4049F0
mov     edx, [eax+114h]
mov     ebx, eax
lea     ecx, [edx+1]
mov     [eax+114h], ecx
test    edx, edx
jle     short loc_4049E7
mov     eax, [eax+110h]
mov     edx, ebx
call    sub_404700
cmp     eax, 1
sbb     eax, eax
not     eax
and     ebx, eax

loc_4049E7:
add     esp, 8
mov     eax, ebx
pop     ebx
retn
align 10h

loc_4049F0:
call    _errno
xor     ebx, ebx
mov     dword ptr [eax], 9
jmp     short loc_4049E7
sub_4049B0 endp

align 10h



; int __cdecl sub_404A00(void *Memory)
sub_404A00 proc near

hFindFile= dword ptr -1Ch
Memory= dword ptr  4

push    ebx
sub     esp, 18h
mov     ebx, [esp+1Ch+Memory]
test    ebx, ebx
jz      short loc_404A30
mov     eax, [ebx+110h]
mov     [esp+1Ch+hFindFile], eax ; hFindFile
call    FindClose
sub     esp, 4
test    eax, eax
jz      short loc_404A30
mov     [esp+1Ch+hFindFile], ebx ; Memory
call    free
xor     eax, eax

loc_404A2B:
add     esp, 18h
pop     ebx
retn

loc_404A30:
call    _errno
mov     dword ptr [eax], 9
mov     eax, 0FFFFFFFFh
jmp     short loc_404A2B
sub_404A00 endp

align 10h



sub_404A50 proc near

hFindFile= dword ptr -1Ch
arg_0= dword ptr  4

push    ebx
sub     esp, 18h
mov     ebx, [esp+1Ch+arg_0]
test    ebx, ebx
jz      short loc_404A71
mov     eax, [ebx+110h]
mov     [esp+1Ch+hFindFile], eax ; hFindFile
call    FindClose
sub     esp, 4
test    eax, eax
jnz     short loc_404A81

loc_404A71:
call    _errno
mov     dword ptr [eax], 9

loc_404A7C:
add     esp, 18h
pop     ebx
retn

loc_404A81:
lea     eax, [ebx+118h]
mov     edx, ebx
call    sub_404620
mov     [ebx+110h], eax
cmp     eax, 0FFFFFFFFh
jz      short loc_404A7C
mov     dword ptr [ebx+114h], 0
add     esp, 18h
pop     ebx
retn
sub_404A50 endp

align 10h
sub     esp, 0Ch
mov     eax, [esp+10h]
test    eax, eax
jz      short loc_404AC5
mov     eax, [eax+114h]

loc_404AC1:
add     esp, 0Ch
retn

loc_404AC5:
call    _errno
mov     dword ptr [eax], 9
mov     eax, 0FFFFFFFFh
jmp     short loc_404AC1
align 10h
push    esi
push    ebx
sub     esp, 14h
mov     esi, [esp+24h]
mov     ebx, [esp+20h]
test    esi, esi
js      short loc_404B40
mov     [esp], ebx
call    sub_404A50
test    esi, esi
jz      short loc_404B34
cmp     dword ptr [ebx+110h], 0FFFFFFFFh
jnz     short loc_404B21
jmp     short loc_404B34
align 10h

loc_404B10:
mov     eax, [ebx+110h]
mov     edx, ebx
call    sub_404700
test    eax, eax
jz      short loc_404B34

loc_404B21:
mov     eax, [ebx+114h]
add     eax, 1
mov     [ebx+114h], eax
cmp     eax, esi
jl      short loc_404B10

loc_404B34:
add     esp, 14h
pop     ebx
pop     esi
retn
align 10h

loc_404B40:
call    _errno
mov     dword ptr [eax], 16h
add     esp, 14h
pop     ebx
pop     esi
retn
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcstombs. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION tolower. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcoll. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION signal. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION setlocale. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION scanf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION realloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION mbstowcs. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION fgets. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fflush. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _setmode. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _isctype. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fullpath. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _errno. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _cexit. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION __p__fmode. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __p__environ. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION VirtualQuery. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION VirtualProtect. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION TlsGetValue. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION SetUnhandledExceptionFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SetConsoleTextAttribute. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION LoadLibraryA. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION LeaveCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION InitializeCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetStdHandle. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetProcAddress. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetLastError. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetCommandLineA. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION FreeLibrary. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FindNextFileA. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION FindFirstFileA. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FindClose. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION ExitProcess. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EnterCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION DeleteCriticalSection. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _stricoll. PRESS CTRL-NUMPAD+ TO EXPAND]
align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strdup. PRESS CTRL-NUMPAD+ TO EXPAND]
align 10h


; Attributes: bp-based frame thunk

sub_404D10 proc near
jmp     sub_401330
sub_404D10 endp

align 10h
dword_404D20 dd 0FFFFFFFFh
dd offset sub_404D10
dd 0
dd 0FFFFFFFFh
dword_404D30 dd 34h dup(0)
dd 80h dup(?)
_text ends

; Section 2. (virtual address 00005000)
; Virtual size                  : 00000074 (    116.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00004200
; Flags C0600040: Data Readable Writable
; Alignment     : 32 bytes

; Segment type: Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data segment para public 'DATA' use32
assume cs:_data
;org 405000h
dword_405000 dd 0
align 20h
byte_405020 db 90h
db 0ACh ; ¬
db 0CAh ; ֺ
db  8Fh
db  65h ; e
db  6Ch ; l
db  7Eh ; ~
db  65h ; e
db  68h ; h
db  69h ; i
db  2Dh ; -
db  7Dh ; }
db  6Ch ; l
db  7Eh ; ~
db  7Eh ; ~
db  7Ah ; z
db  62h ; b
db  7Fh ; 
db  69h ; i
db  2Dh ; -
db  5Ah ; Z
db  58h ; X
db  6Fh ; o
db  13h
db  11h
db  59h ; Y
db  73h ; s
db  41h ; A
db  45h ; E
db  29h ; )
db  4Eh ; N
db  4Fh ; O
db  13h
db  15h
db  5Bh ; [
db  1Ch
db  0Ah
db  6Fh ; o
db  5Ah ; Z
db  0Dh
db    5
db  1Dh
db  72h ; r
db  57h ; W
db  1Ch
db  37h ; 7
db    4
db  15h
db  55h ; U
db  71h ; q
db  15h
db  43h ; C
db  7Ah ; z
db  49h ; I
db  47h ; G
db  10h
db  2Eh ; .
db    0
db    0
db    0
dword_40505C dd 39h
dword_405060 dd 2
dword_405064 dd 0FFFFFFFDh
dword_405068 dd 4000h
off_40506C dd offset dword_404D30
dword_405070 dd 0FFFFFFFFh
align 1000h
_data ends

; Section 3. (virtual address 00006000)
; Virtual size                  : 00000474 (   1140.)
; Section size in file          : 00000600 (   1536.)
; Offset to raw data for section: 00004400
; Flags 40300040: Data Readable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read
_rdata segment dword public 'DATA' use32
assume cs:_rdata
;org 406000h
; CHAR LibFileName[]
LibFileName db 'libgcc_s_dw2-1.dll',0
; CHAR ProcName[]
ProcName db '__register_frame_info',0
; CHAR aDeregisterFram[]
aDeregisterFram db '__deregister_frame_info',0
align 4
; char Format[]
Format db ' %x',0
; char aDDD[]
aDDD db ' %d %d %d',0
; char asc_406052[]
asc_406052 db ' ?',0
; char asc_406055[]
asc_406055 db ' *',0
; char asc_406058[]
asc_406058 db '  ',0
; char asc_40605B[]
asc_40605B db 8,'? ',0
; char asc_40605F[]
asc_40605F db '* ',0
; char aD[]
aD db ' %d',0
; char a02d[]
a02d db ' %02d',0
; char a02d_0[]
a02d_0 db 8,'%02d',0
; char a02d_1[]
a02d_1 db '%02d',0
; char Str[]
Str db 'entered this challenge',0
; char asc_40608E[]
asc_40608E db ' ',0
off_406090 dd offset loc_402723, offset loc_402762 ; jump table for switch statement
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_4026E0
dd offset loc_402762, offset loc_402762
dd offset loc_4026B0, offset loc_402762
dd offset loc_4026B0, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_4026B0
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402660
dd offset loc_4025F0, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_402762
dd offset loc_402762, offset loc_4026B0
dd offset loc_402762, offset loc_4026B0
dd offset loc_402762, offset loc_4026B0
off_406208 dd offset TlsCallback_0
aMingwRuntimeFa db 'Mingw runtime failure:',0Ah,0
; char aVirtualqueryFa[]
aVirtualqueryFa db '  VirtualQuery failed for %d bytes '
db 'at address %p',0
align 4
; char aUnknownPseudoR_0[]
aUnknownPseudoR_0 db '  Unknown pseudo relocation protoco'
db 'l version %d.',0Ah,0
align 4
; char aUnknownPseudoR[]
aUnknownPseudoR db '  Unknown pseudo relocation bit siz'
db 'e %d.',0Ah,0
align 4
asc_4062B8 db '.',0
aGlob10Mingw32 db 'glob-1.0-mingw32',0
align 4
unk_4062CC db    0
db    0
; wchar_t Source
Source db '.',0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  4Dh ; M
db  69h ; i
db  6Eh ; n
db  47h ; G
db  57h ; W
db  2Eh ; .
db  6Fh ; o
db  72h ; r
db  67h ; g
db  20h
db  47h ; G
db  43h ; C
db  43h ; C
db  2Dh ; -
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db  2Dh ; -
db  35h ; 5
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
db  47h ; G
db  43h ; C
db  43h ; C
db  3Ah ; :
db  20h
db  28h ; (
db  47h ; G
db  4Eh ; N
db  55h ; U
db  29h ; )
db  20h
db  38h ; 8
db  2Eh ; .
db  32h ; 2
db  2Eh ; .
db  30h ; 0
db    0
db    0
db    0
db    0
dword_406474 dd 0
dword_406478 dd 0
dword_40647C dd 0
dword_406480 dd 0
align 1000h
_rdata ends

; Section 4. (virtual address 00007000)
; Virtual size                  : 00000980 (   2432.)
; Section size in file          : 00000A00 (   2560.)
; Offset to raw data for section: 00004A00
; Flags 40300040: Data Readable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read
_eh_fram segment dword public 'DATA' use32
assume cs:_eh_fram
;org 407000h
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  18h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E0h ; א
db  9Fh
db 0FFh
db 0FFh
db  92h ; ’
db    1
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db  71h ; q
db  0Ah
db  0Eh
db    4
db  4Ch ; L
db  0Bh
db    0
db    0
db  18h
db    0
db    0
db    0
db  38h ; 8
db    0
db    0
db    0
db  64h ; d
db 0A1h ; ¡
db 0FFh
db 0FFh
db 0ECh ; ל
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  44h ; D
db  83h ; ƒ
db    3
db  14h
db    0
db    0
db    0
db  54h ; T
db    0
db    0
db    0
db  38h ; 8
db 0A2h ; ¢
db 0FFh
db 0FFh
db  3Fh ; ?
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  40h ; @
db  7Bh ; {
db  0Eh
db    4
db    0
db  10h
db    0
db    0
db    0
db  6Ch ; l
db    0
db    0
db    0
db  60h ; `
db 0A2h ; ¢
db 0FFh
db 0FFh
db  15h
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db  10h
db    0
db    0
db    0
db  80h ; €
db    0
db    0
db    0
db  6Ch ; l
db 0A2h ; ¢
db 0FFh
db 0FFh
db  15h
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db  10h
db    0
db    0
db    0
db  94h ; ”
db    0
db    0
db    0
db  78h ; x
db 0A2h ; ¢
db 0FFh
db 0FFh
db    6
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db 0A8h ; ¨
db    0
db    0
db    0
db  74h ; t
db 0A2h ; ¢
db 0FFh
db 0FFh
db    6
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4070B8 db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  28h ; (
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  58h ; X
db 0A2h ; ¢
db 0FFh
db 0FFh
db 0A1h ; ¡
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  45h ; E
db  86h ; †
db    3
db  83h ; ƒ
db    4
db    2
db  7Bh ; {
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  4Bh ; K
db  0Bh
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    0
db    0
db    0
db 0DCh
db 0A2h ; ¢
db 0FFh
db 0FFh
db  2Eh ; .
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  6Ah ; j
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  14h
db 0B4h ; ´
db 0FFh
db 0FFh
db  66h ; f
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  46h ; F
db  87h ; ‡
db    3
db  86h ; †
db    4
db  83h ; ƒ
db    5
db  52h ; R
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  42h ; B
db  0Bh
db    2
db 0E6h ; ז
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  47h ; G
db  0Bh
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  24h ; $
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  2Ch ; ,
db 0B7h ; ·
db 0FFh
db 0FFh
db    7
db    1
db    0
db    0
db    0
db  5Dh ; ]
db  0Eh
db    8
db  83h ; ƒ
db    2
db    2
db  48h ; H
db  0Ch
db    5
db  0Ch
db  85h ; …
db    3
db    2
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    8
db    2
db  5Fh ; _
db 0C3h ; ֳ
db  0Eh
db    4
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  14h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0FCh
db 0B7h ; ·
db 0FFh
db 0FFh
db  31h ; 1
db    0
db    0
db    0
db    0
db  4Eh ; N
db  0Eh
db  10h
db  5Ch ; \
db  0Eh
db    4
db    0
db  20h
db    0
db    0
db    0
db  34h ; 4
db    0
db    0
db    0
db  24h ; $
db 0B8h ; ¸
db 0FFh
db 0FFh
db  46h ; F
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  83h ; ƒ
db    2
db  43h ; C
db  0Eh
db  20h
db  6Ah ; j
db  0Ah
db  0Eh
db    8
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db  10h
db    0
db    0
db    0
db  58h ; X
db    0
db    0
db    0
db  50h ; P
db 0B8h ; ¸
db 0FFh
db 0FFh
db  1Ch
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  44h ; D
db 0B8h ; ¸
db 0FFh
db 0FFh
db  43h ; C
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db  55h ; U
db  0Ah
db  0Eh
db    4
db  48h ; H
db  0Bh
db  60h ; `
db  0Eh
db    4
db    0
db    0
db    0
db  44h ; D
db    0
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db  74h ; t
db 0B8h ; ¸
db 0FFh
db 0FFh
db  9Ah
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db  64h ; d
db  0Ah
db  0Eh
db  0Ch
db  46h ; F
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  43h ; C
db  0Bh
db  74h ; t
db  0Ah
db  0Eh
db  0Ch
db  46h ; F
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  43h ; C
db  0Bh
db  5Fh ; _
db  0Eh
db  0Ch
db  46h ; F
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db    0
db    0
db    0
db  10h
db    0
db    0
db    0
db  84h ; „
db    0
db    0
db    0
db 0CCh ; ּ
db 0B8h ; ¸
db 0FFh
db 0FFh
db    3
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  38h ; 8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0B0h ; °
db 0B8h ; ¸
db 0FFh
db 0FFh
db  60h ; `
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db  4Ch ; L
db  0Eh
db  1Ch
db  49h ; I
db  0Eh
db  20h
db  50h ; P
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  6Ah ; j
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  43h ; C
db  0Eh
db  0Ch
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db    0
db  44h ; D
db    0
db    0
db    0
db  58h ; X
db    0
db    0
db    0
db 0D4h ; װ
db 0B8h ; ¸
db 0FFh
db 0FFh
db  82h ; ‚
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  43h ; C
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db  4Ch ; L
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  49h ; I
db  0Bh
db  73h ; s
db  0Eh
db  1Ch
db  4Eh ; N
db  0Eh
db  20h
db  4Fh ; O
db  0Eh
db  1Ch
db  45h ; E
db  0Eh
db  20h
db  43h ; C
db  0Ah
db  0Eh
db  0Ch
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db 0A0h ;  
db    0
db    0
db    0
db  1Ch
db 0B9h ; ¹
db 0FFh
db 0FFh
db  9Bh ; ›
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  83h ; ƒ
db    2
db  43h ; C
db  0Eh
db  20h
db  50h ; P
db  0Ah
db  0Eh
db    8
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    4
db  49h ; I
db  0Bh
db  4Ch ; L
db  0Eh
db  1Ch
db  49h ; I
db  0Eh
db  20h
db  67h ; g
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  43h ; C
db  0Ah
db  0Eh
db    8
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    4
db  4Bh ; K
db  0Bh
db  5Ah ; Z
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db    0
db  30h ; 0
db    0
db    0
db    0
db 0E0h ; א
db    0
db    0
db    0
db  7Ch ; |
db 0B9h ; ¹
db 0FFh
db 0FFh
db 0B1h ; ±
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db  63h ; c
db  0Ah
db  0Eh
db    4
db  4Ah ; J
db  0Bh
db  69h ; i
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  5Fh ; _
db  0Ah
db  0Eh
db    4
db  45h ; E
db  0Bh
db  5Eh ; ^
db  0Ah
db  0Eh
db    4
db  42h ; B
db  0Bh
db  4Ch ; L
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0F0h ; נ
db 0B9h ; ¹
db 0FFh
db 0FFh
db  4Ah ; J
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db    0
db    0
db  64h ; d
db    0
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db  20h
db 0BAh ; ÷
db 0FFh
db 0FFh
db 0ECh ; ל
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  41h ; A
db  0Eh
db  0Ch
db  87h ; ‡
db    3
db  43h ; C
db  0Eh
db  10h
db  86h ; †
db    4
db  43h ; C
db  0Eh
db  14h
db  83h ; ƒ
db    5
db  45h ; E
db  0Eh
db  50h ; P
db  58h ; X
db  0Eh
db  44h ; D
db  43h ; C
db  0Eh
db  50h ; P
db  6Dh ; m
db  0Ah
db  0Eh
db  14h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  47h ; G
db  0Bh
db  64h ; d
db  0Eh
db  40h ; @
db  43h ; C
db  0Eh
db  50h ; P
db    2
db  42h ; B
db  0Eh
db  40h ; @
db  43h ; C
db  0Eh
db  50h ; P
db  43h ; C
db  0Ah
db  0Eh
db  14h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db  54h ; T
db    0
db    0
db    0
db 0A4h ; ₪
db    0
db    0
db    0
db 0A8h ; ¨
db 0BAh ; ÷
db 0FFh
db 0FFh
db 0DAh
db    1
db    0
db    0
db    0
db  6Ah ; j
db  0Eh
db    8
db  85h ; …
db    2
db  41h ; A
db  0Eh
db  0Ch
db  87h ; ‡
db    3
db  41h ; A
db  0Eh
db  10h
db  86h ; †
db    4
db  41h ; A
db  0Eh
db  14h
db  83h ; ƒ
db    5
db  43h ; C
db  0Eh
db  40h ; @
db    2
db  8Bh ; ‹
db  0Ah
db  0Eh
db  14h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    2
db 0F2h ; ע
db  0Ah
db  0Eh
db  14h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  4Ah ; J
db  0Bh
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  18h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db 0BCh ; ¼
db 0FFh
db 0FFh
db  77h ; w
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  20h
db    2
db  41h ; A
db  0Ah
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  94h ; ”
db 0BCh ; ¼
db 0FFh
db 0FFh
db  29h ; )
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  43h ; C
db  0Eh
db  0Ch
db  87h ; ‡
db    3
db  41h ; A
db  0Eh
db  10h
db  86h ; †
db    4
db  43h ; C
db  0Eh
db  14h
db  83h ; ƒ
db    5
db  43h ; C
db  0Eh
db  50h ; P
db    3
db  1Bh
db    1
db  0Ah
db  0Eh
db  14h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  46h ; F
db  0Bh
db  54h ; T
db    0
db    0
db    0
db  5Ch ; \
db    0
db    0
db    0
db  84h ; „
db 0BFh ; ¿
db 0FFh
db 0FFh
db  0Fh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  41h ; A
db  0Eh
db  0Ch
db  87h ; ‡
db    3
db  43h ; C
db  0Eh
db  10h
db  86h ; †
db    4
db  41h ; A
db  0Eh
db  14h
db  83h ; ƒ
db    5
db  43h ; C
db  0Eh
db  40h ; @
db    2
db  92h ; ’
db  0Ah
db  0Eh
db  14h
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    2
db  43h ; C
db  0Ah
db  0Eh
db  14h
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db  10h
db  43h ; C
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  43h ; C
db  0Bh
db    0
db    0
db  30h ; 0
db    0
db    0
db    0
db 0B4h ; ´
db    0
db    0
db    0
db  3Ch ; <
db 0C1h ; ֱ
db 0FFh
db 0FFh
db  8Eh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  46h ; F
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db    2
db  45h ; E
db  0Ah
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  43h ; C
db  0Bh
db  76h ; v
db  0Ah
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  43h ; C
db  0Bh
db    0
db    0
db  34h ; 4
db    0
db    0
db    0
db 0E8h ; ט
db    0
db    0
db    0
db  98h ; ˜
db 0C1h ; ֱ
db 0FFh
db 0FFh
db  4Fh ; O
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  43h ; C
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db  78h ; x
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  41h ; A
db  0Bh
db  43h ; C
db  0Eh
db  0Ch
db  46h ; F
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db    0
db  44h ; D
db    0
db    0
db    0
db  20h
db    1
db    0
db    0
db 0B0h ; °
db 0C1h ; ֱ
db 0FFh
db 0FFh
db  5Ch ; \
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  87h ; ‡
db    2
db  41h ; A
db  0Eh
db  0Ch
db  86h ; †
db    3
db  43h ; C
db  0Eh
db  10h
db  83h ; ƒ
db    4
db  45h ; E
db  0Eh
db  20h
db    2
db  40h ; @
db  0Ah
db  0Eh
db  10h
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db  0Ch
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    8
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    4
db  41h ; A
db  0Bh
db  43h ; C
db  0Eh
db  10h
db  46h ; F
db 0C3h ; ֳ
db  0Eh
db  0Ch
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    8
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    4
db    0
db    0
db    0
db  28h ; (
db    0
db    0
db    0
db  68h ; h
db    1
db    0
db    0
db 0C8h ; ָ
db 0C1h ; ֱ
db 0FFh
db 0FFh
db  49h ; I
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  43h ; C
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  45h ; E
db  0Eh
db  20h
db  6Fh ; o
db  0Ah
db  0Eh
db  0Ch
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  46h ; F
db  0Bh
db  3Ch ; <
db    0
db    0
db    0
db  94h ; ”
db    1
db    0
db    0
db 0ECh ; ל
db 0C1h ; ֱ
db 0FFh
db 0FFh
db  78h ; x
db    8
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  46h ; F
db  87h ; ‡
db    3
db  86h ; †
db    4
db  83h ; ƒ
db    5
db    3
db  11h
db    4
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  41h ; A
db  0Bh
db    3
db 0C7h ; ַ
db    1
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  48h ; H
db  0Bh
db  2Ch ; ,
db    0
db    0
db    0
db 0D4h ; װ
db    1
db    0
db    0
db  2Ch ; ,
db 0CAh ; ֺ
db 0FFh
db 0FFh
db 0D7h ; ׳
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  46h ; F
db  87h ; ‡
db    3
db  86h ; †
db    4
db  83h ; ƒ
db    5
db    2
db  46h ; F
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  41h ; A
db  0Bh
db    0
db  40h ; @
db    0
db    0
db    0
db    4
db    2
db    0
db    0
db 0DCh
db 0CAh ; ֺ
db 0FFh
db 0FFh
db  57h ; W
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  87h ; ‡
db    2
db  41h ; A
db  0Eh
db  0Ch
db  86h ; †
db    3
db  41h ; A
db  0Eh
db  10h
db  83h ; ƒ
db    4
db  43h ; C
db  0Eh
db  20h
db  4Fh ; O
db  0Ah
db  0Eh
db  10h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  0Ch
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    8
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    4
db  48h ; H
db  0Bh
db  6Fh ; o
db  0Eh
db  10h
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db  0Ch
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    8
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    4
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  2Ch ; ,
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E0h ; א
db 0CAh ; ֺ
db 0FFh
db 0FFh
db 0E5h ; ו
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  42h ; B
db  0Dh
db    5
db  46h ; F
db  87h ; ‡
db    3
db  86h ; †
db    4
db  83h ; ƒ
db    5
db    2
db 0B4h ; ´
db  0Ah
db 0C3h ; ֳ
db  41h ; A
db 0C6h ; ֶ
db  41h ; A
db 0C7h ; ַ
db  41h ; A
db 0C5h ; ֵ
db  0Ch
db    4
db    4
db  41h ; A
db  0Bh
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  40h ; @
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h ; ˆ
db 0CEh ; ־
db 0FFh
db 0FFh
db 0D3h ; ׃
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  48h ; H
db  0Eh
db 0E0h ; א
db    2
db  50h ; P
db  0Eh
db 0D8h ; ״
db    2
db  43h ; C
db  0Eh
db 0E0h ; א
db    2
db    2
db  48h ; H
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  47h ; G
db  0Bh
db  4Dh ; M
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  41h ; A
db  0Bh
db  4Ch ; L
db    0
db    0
db    0
db  60h ; `
db    0
db    0
db    0
db  24h ; $
db 0CFh ; ֿ
db 0FFh
db 0FFh
db 0A2h ; ¢
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  48h ; H
db  0Eh
db 0E0h ; א
db    2
db  50h ; P
db  0Eh
db 0D8h ; ״
db    2
db  43h ; C
db  0Eh
db 0E0h ; א
db    2
db    2
db  47h ; G
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  48h ; H
db  0Bh
db  4Dh ; M
db  0Ah
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  41h ; A
db  0Bh
db  5Bh ; [
db  0Eh
db  0Ch
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db    0
db  54h ; T
db    0
db    0
db    0
db 0B0h ; °
db    0
db    0
db    0
db  84h ; „
db 0CFh ; ֿ
db 0FFh
db 0FFh
db 0F1h ; ס
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  85h ; …
db    2
db  41h ; A
db  0Eh
db  0Ch
db  87h ; ‡
db    3
db  41h ; A
db  0Eh
db  10h
db  86h ; †
db    4
db  41h ; A
db  0Eh
db  14h
db  83h ; ƒ
db    5
db  46h ; F
db  0Eh
db 0C0h ; ְ
db    2
db    3
db  53h ; S
db    1
db  0Ah
db  0Eh
db  14h
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    2
db  4Fh ; O
db  0Ah
db  0Eh
db  14h
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db  10h
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db  0Ch
db  41h ; A
db 0C7h ; ַ
db  0Eh
db    8
db  41h ; A
db 0C5h ; ֵ
db  0Eh
db    4
db  47h ; G
db  0Bh
db  20h
db    0
db    0
db    0
db    8
db    1
db    0
db    0
db  2Ch ; ,
db 0D1h ; ׁ
db 0FFh
db 0FFh
db  4Fh ; O
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  83h ; ƒ
db    2
db  43h ; C
db  0Eh
db  10h
db  76h ; v
db  0Ah
db  0Eh
db    8
db  43h ; C
db 0C3h ; ֳ
db  0Eh
db    4
db  43h ; C
db  0Bh
db    0
db  28h ; (
db    0
db    0
db    0
db  2Ch ; ,
db    1
db    0
db    0
db  58h ; X
db 0D1h ; ׁ
db 0FFh
db 0FFh
db  42h ; B
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  83h ; ƒ
db    2
db  43h ; C
db  0Eh
db  20h
db  56h ; V
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  51h ; Q
db  0Ah
db  0Eh
db    8
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db    0
db    0
db  2Ch ; ,
db    0
db    0
db    0
db  58h ; X
db    1
db    0
db    0
db  7Ch ; |
db 0D1h ; ׁ
db 0FFh
db 0FFh
db  58h ; X
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  83h ; ƒ
db    2
db  43h ; C
db  0Eh
db  20h
db  56h ; V
db  0Eh
db  1Ch
db  43h ; C
db  0Eh
db  20h
db  52h ; R
db  0Ah
db  0Eh
db    8
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    4
db  41h ; A
db  0Bh
db  65h ; e
db  0Eh
db    8
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    4
db  18h
db    0
db    0
db    0
db  88h ; ˆ
db    1
db    0
db    0
db 0ACh ; ¬
db 0D1h ; ׁ
db 0FFh
db 0FFh
db  27h ; '
db    0
db    0
db    0
db    0
db  43h ; C
db  0Eh
db  10h
db  51h ; Q
db  0Ah
db  0Eh
db    4
db  41h ; A
db  0Bh
db    0
db    0
db  34h ; 4
db    0
db    0
db    0
db 0A4h ; ₪
db    1
db    0
db    0
db 0C0h ; ְ
db 0D1h ; ׁ
db 0FFh
db 0FFh
db  71h ; q
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db    8
db  86h ; †
db    2
db  41h ; A
db  0Eh
db  0Ch
db  83h ; ƒ
db    3
db  43h ; C
db  0Eh
db  20h
db    2
db  52h ; R
db  0Ah
db  0Eh
db  0Ch
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db  47h ; G
db  0Bh
db  4Eh ; N
db  0Eh
db  0Ch
db  41h ; A
db 0C3h ; ֳ
db  0Eh
db    8
db  41h ; A
db 0C6h ; ֶ
db  0Eh
db    4
db    0
db    0
db    0
db    0
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  7Ch ; |
db    8
db    1
db  1Bh
db  0Ch
db    4
db    4
db  88h ; ˆ
db    1
db    0
db    0
db  10h
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  9Ch
db 0D3h ; ׃
db 0FFh
db 0FFh
db    5
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
_eh_fram ends

; Section 5. (virtual address 00008000)
; Virtual size                  : 00000074 (    116.)
; Section size in file          : 00000000 (      0.)
; Offset to raw data for section: 00000000
; Flags C0300080: Bss Readable Writable
; Alignment     : 4 bytes

; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss segment dword public 'BSS' use32
assume cs:_bss
;org 408000h
assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_408000 dd ?
dword_408004 dd ?
unk_408008 db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_408020 dd ?
dword_408024 dd ?
dword_408028 dd ?
dword_40802C dd ?
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
TlsIndex db    ? ;
db    ? ;
db    ? ;
db    ? ;
dword_408040 dd ?
dword_408044 dd ?
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection _RTL_CRITICAL_SECTION <?>
dword_408060 dd ?
align 8
dword_408068 dd ?
; void *Memory
Memory dd ?
; HMODULE hLibModule
hLibModule dd ?
align 1000h
_bss ends

;
; Imports from KERNEL32.dll
;
; Section 6. (virtual address 00009000)
; Virtual size                  : 000006A4 (   1700.)
; Section size in file          : 00000800 (   2048.)
; Offset to raw data for section: 00005400
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes

; Segment type: Externs
; _idata
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn __imp_DeleteCriticalSection:dword
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn __imp_EnterCriticalSection:dword
; void __stdcall __noreturn ExitProcess(UINT uExitCode)
extrn __imp_ExitProcess:dword
; BOOL __stdcall FindClose(HANDLE hFindFile)
extrn __imp_FindClose:dword
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
extrn __imp_FindFirstFileA:dword
; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
extrn __imp_FindNextFileA:dword
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
extrn __imp_FreeLibrary:dword
; LPSTR __stdcall GetCommandLineA()
extrn __imp_GetCommandLineA:dword
; DWORD __stdcall GetLastError()
extrn __imp_GetLastError:dword
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
extrn __imp_GetModuleHandleA:dword
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
extrn __imp_GetProcAddress:dword
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
extrn __imp_GetStdHandle:dword
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn __imp_InitializeCriticalSection:dword
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
extrn __imp_LeaveCriticalSection:dword
; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
extrn __imp_LoadLibraryA:dword
; BOOL __stdcall SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes)
extrn __imp_SetConsoleTextAttribute:dword
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
extrn __imp_SetUnhandledExceptionFilter:dword
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
extrn __imp_TlsGetValue:dword
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
extrn __imp_VirtualProtect:dword
; SIZE_T __stdcall VirtualQuery(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
extrn __imp_VirtualQuery:dword

;
; Imports from msvcrt.dll
;
; char *__cdecl _strdup(const char *Src)
extrn __imp__strdup:dword
; int __cdecl _stricoll(const char *Str1, const char *Str2)
extrn __imp__stricoll:dword

;
; Imports from msvcrt.dll
;
extrn __imp___getmainargs:dword
; int _mb_cur_max
extrn __mb_cur_max:dword
extrn __imp___p__environ:dword
extrn __imp___p__fmode:dword
extrn __set_app_type:dword
extrn __imp__cexit:dword
; int *__cdecl _errno()
extrn __imp__errno:dword
; void __cdecl fpreset()
extrn _fpreset:dword
; char *__cdecl _fullpath(char *FullPath, const char *Path, size_t SizeInBytes)
extrn __imp__fullpath:dword
; FILE *iob
extrn _iob:dword
; int __cdecl _isctype(int C, int Type)
extrn __imp__isctype:dword
; _onexit_t __cdecl onexit(_onexit_t Func)
extrn _onexit:dword
; const unsigned __int16 *pctype
extrn _pctype:dword
extrn __imp__setmode:dword
; void __cdecl abort()
extrn __imp_abort:dword
; int __cdecl atexit(void (__cdecl *)())
extrn __imp_atexit:dword
; void *__cdecl calloc(size_t NumOfElements, size_t SizeOfElements)
extrn __imp_calloc:dword
; void __cdecl __noreturn exit(int Code)
extrn __imp_exit:dword
; int __cdecl fflush(FILE *File)
extrn __imp_fflush:dword
; char *__cdecl fgets(char *Buf, int MaxCount, FILE *File)
extrn __imp_fgets:dword
; int __cdecl fputc(int Ch, FILE *File)
extrn __imp_fputc:dword
; void __cdecl free(void *Memory)
extrn __imp_free:dword
; size_t __cdecl fwrite(const void *Str, size_t Size, size_t Count, FILE *File)
extrn __imp_fwrite:dword
; void *__cdecl malloc(size_t Size)
extrn __imp_malloc:dword
; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
extrn __imp_mbstowcs:dword
; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
extrn __imp_memcpy:dword
; int printf(const char *Format, ...)
extrn __imp_printf:dword
; int __cdecl putchar(int Ch)
extrn __imp_putchar:dword
; int __cdecl puts(const char *Str)
extrn __imp_puts:dword
; void *__cdecl realloc(void *Memory, size_t NewSize)
extrn __imp_realloc:dword
; int scanf(const char *Format, ...)
extrn __imp_scanf:dword
extrn __imp_setlocale:dword
extrn __imp_signal:dword
; int __cdecl strcoll(const char *Str1, const char *Str2)
extrn __imp_strcoll:dword
; size_t __cdecl strlen(const char *Str)
extrn __imp_strlen:dword
; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
extrn __imp_strncmp:dword
; int __cdecl tolower(int C)
extrn __imp_tolower:dword
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
extrn __imp_vfprintf:dword
; size_t __cdecl wcstombs(char *Dest, const wchar_t *Source, size_t MaxCount)
extrn __imp_wcstombs:dword


; Section 7. (virtual address 0000A000)
; Virtual size                  : 00000018 (     24.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00005C00
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read/Write
_CRT segment dword public 'DATA' use32
assume cs:_CRT
;org 40A000h
db    0
db    0
db    0
db    0
TlsCallbacks dd offset TlsCallback_0
dd offset TlsCallback_1
dd 0
db    0
db    0
db    0
db    0
dword_40A014 dd 0
align 1000h
_CRT ends

; Section 8. (virtual address 0000B000)
; Virtual size                  : 00000020 (     32.)
; Section size in file          : 00000200 (    512.)
; Offset to raw data for section: 00005E00
; Flags C0300040: Data Readable Writable
; Alignment     : 4 bytes

; Segment type: Pure data
; Segment permissions: Read/Write
_tls segment dword public 'DATA' use32
assume cs:_tls
;org 40B000h
db    0
TlsStart db    0
db    0
db    0
TlsDirectory dd offset TlsStart
TlsEnd_ptr dd offset TlsEnd
TlsIndex_ptr dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
db    ? ;
_tls ends


end start
